<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Asu1tty&#39;s Blog</title>
    <link>https://asu1tty.github.io/algolia.json</link>
    <description>Recent content from Asu1tty&#39;s Blog</description>
    <generator>Hugo</generator>
    <language>zh-cn</language>
    
    <managingEditor>unknow (Asu1tty)</managingEditor>
    <webMaster>unknow (Asu1tty)</webMaster>
    
    <copyright>本博客所有文章除特别声明外，均采用 BY-NC-SA 许可协议。转载请注明出处！</copyright>
    
    <lastBuildDate>Sat, 17 May 2025 11:18:36 +0800</lastBuildDate>
    
    
    <atom:link href="https://asu1tty.github.io/index.xml" rel="self" type="application/rss&#43;xml" />
    

    
    

    <item>
      <title>浅析So加固的三种方式</title>
      <link>https://asu1tty.github.io/post/so-harden/</link>
      <pubDate>Sat, 17 May 2025 11:18:36 &#43;0800</pubDate>
      <author>unknow (Asu1tty)</author>
      <guid>https://asu1tty.github.io/post/so-harden/</guid>
      <description>
        <![CDATA[<h1>浅析So加固的三种方式</h1><p>作者：Asu1tty（unknow）</p>
        
          <p>简单分享一下so加固的方案。本文章的代码基于<a href="https://bbs.kanxue.com/thread-285650.htm">关于SO加密对抗的两种实现方式</a>
在看本篇文章之前，最好需要了解一下ELF文件格式，以及So的加载流程，这里推荐oacia大佬的两篇文章。<a href="https://oacia.dev/ElfReader/">ELF结构分析及ElfReader</a>和<a href="https://oacia.dev/android-load-so/">安卓so加载流程源码分析</a>。</p>
        
        <hr><p>本文2025-05-17首发于<a href='https://asu1tty.github.io/'>Asu1tty's Blog</a>，最后修改于2025-05-17</p>]]>
      </description>
      
    </item>
    
    

    <item>
      <title>Android so加载源码分析与加壳技术</title>
      <link>https://asu1tty.github.io/post/loading-so/</link>
      <pubDate>Thu, 01 May 2025 11:20:50 &#43;0800</pubDate>
      <author>unknow (Asu1tty)</author>
      <guid>https://asu1tty.github.io/post/loading-so/</guid>
      <description>
        <![CDATA[<h1>Android so加载源码分析与加壳技术</h1><p>作者：Asu1tty（unknow）</p>
        
          <p>本次分析AOSP 的源码的安卓版本为 <code>android-12.0.0_r34</code></p>
<h2 id="1-java层调用">
<a class="header-anchor" href="#1-java%e5%b1%82%e8%b0%83%e7%94%a8"></a>
1. java层调用
</h2><p>So在java层的加载方式有两种</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="n">System</span><span class="p">.</span><span class="na">loadLibrary</span><span class="p">(</span><span class="n">String</span><span class="w"> </span><span class="n">libName</span><span class="p">)</span><span class="w">
</span></span></span></code></pre></div><p>或</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="n">System</span><span class="p">.</span><span class="na">load</span><span class="p">(</span><span class="n">String</span><span class="w"> </span><span class="n">path</span><span class="p">)</span><span class="w">
</span></span></span></code></pre></div><h3 id="11-systemload">
<a class="header-anchor" href="#11-systemload"></a>
1.1. System.load()
</h3><p>这里我们以<code>System.load</code>作为分析入口</p>
        
        <hr><p>本文2025-05-01首发于<a href='https://asu1tty.github.io/'>Asu1tty's Blog</a>，最后修改于2025-05-01</p>]]>
      </description>
      
        <category>AOSP</category>
      
    </item>
    
    

    <item>
      <title>ELF结构及加载流程分析</title>
      <link>https://asu1tty.github.io/post/elfreader/</link>
      <pubDate>Wed, 30 Apr 2025 11:18:36 &#43;0800</pubDate>
      <author>unknow (Asu1tty)</author>
      <guid>https://asu1tty.github.io/post/elfreader/</guid>
      <description>
        <![CDATA[<h1>ELF结构及加载流程分析</h1><p>作者：Asu1tty（unknow）</p>
        
          <ul>
<li>
<ul>
<li>
<p>目前，PC平台流行的 <strong>可执行文件格式（Executable）</strong> 主要包含如下两种：</p>
<ul>
<li>Windows下的 <strong>PE（Portable Executable）</strong></li>
<li>Linux下的 <strong>ELF（Executable Linkable Format）</strong></li>
</ul>
<p>ELF（Executable and Linkable Format，可执行和可链接格式）是Linux系统中广泛使用的文件格式，用于存储可执行文件、目标代码、共享库和核心转储（core dump）。它是一种灵活、通用的格式，支持多种处理器架构和操作系统，具有跨平台特性。</p>
        
        <hr><p>本文2025-04-30首发于<a href='https://asu1tty.github.io/'>Asu1tty's Blog</a>，最后修改于2025-04-30</p>]]>
      </description>
      
    </item>
    
    

    <item>
      <title>某红薯shield参数分析</title>
      <link>https://asu1tty.github.io/post/xhs_analysis/</link>
      <pubDate>Fri, 25 Apr 2025 17:48:36 &#43;0800</pubDate>
      <author>unknow (Asu1tty)</author>
      <guid>https://asu1tty.github.io/post/xhs_analysis/</guid>
      <description>
        <![CDATA[<h1>某红薯shield参数分析</h1><p>作者：Asu1tty（unknow）</p>
        
          <p><strong>该文章主要提供交流学习使用， 请勿利用进行不当行为</strong></p>
<p><strong>如本篇文章侵犯了贵公司的隐私，请联系我立刻删除！</strong></p>
<p><strong>如因滥用解密技术而产生的风险与本人无关</strong></p>
        
        <hr><p>本文2025-04-25首发于<a href='https://asu1tty.github.io/'>Asu1tty's Blog</a>，最后修改于2025-04-25</p>]]>
      </description>
      
        <category>逆向实战</category>
      
    </item>
    
    

    <item>
      <title>RC4原理及代码实现</title>
      <link>https://asu1tty.github.io/post/rc4/</link>
      <pubDate>Fri, 25 Apr 2025 17:21:36 &#43;0800</pubDate>
      <author>unknow (Asu1tty)</author>
      <guid>https://asu1tty.github.io/post/rc4/</guid>
      <description>
        <![CDATA[<h1>RC4原理及代码实现</h1><p>作者：Asu1tty（unknow）</p>
        
          <p>在<a href="https://en.wikipedia.org/wiki/Cryptography" title="Cryptography">密码学</a>中，<strong>RC4</strong>（Rivest Cipher 4，也称为 <strong>ARC4</strong> 或 <strong>ARCFOUR，</strong> 意思是Alleged（所谓的） RC4）是一种<a href="https://en.wikipedia.org/wiki/Stream_cipher" title="Stream cipher">流密码</a> 。虽然它在软件中以其简单性和速度而著称，但在 RC4 中发现了多个漏洞，使其不安全。
流密码（streamcipher）是对数据流进行连续处理的一类密码算法。流密码中一般以1比特、8比特或32比特等为单位进行加密和解密。其中RC4的加解密单位为8比特，也就是一个字节。</p>
        
        <hr><p>本文2025-04-25首发于<a href='https://asu1tty.github.io/'>Asu1tty's Blog</a>，最后修改于2025-04-25</p>]]>
      </description>
      
        <category>Crypto</category>
      
    </item>
    
    

    <item>
      <title>AES原理及白盒AES的DFA攻击</title>
      <link>https://asu1tty.github.io/post/wb_aes/</link>
      <pubDate>Thu, 24 Apr 2025 21:10:36 &#43;0800</pubDate>
      <author>unknow (Asu1tty)</author>
      <guid>https://asu1tty.github.io/post/wb_aes/</guid>
      <description>
        <![CDATA[<h1>AES原理及白盒AES的DFA攻击</h1><p>作者：Asu1tty（unknow）</p>
        
          <p>AES（<strong>Advanced Encryption Standard</strong>） <strong>高级加密标准</strong>是 Rijndael <a href="https://en.wikipedia.org/wiki/Block_cipher" title="Block cipher">分组密码</a>  的一种变体，由两位密码学家 <a href="https://en.wikipedia.org/wiki/Joan_Daemen" title="Joan Daemen">Joan Daemen</a> 和 <a href="https://en.wikipedia.org/wiki/Vincent_Rijmen" title="Vincent Rijmen">Vincent Rijmen</a> 开发，他们在 <a href="https://en.wikipedia.org/wiki/Advanced_Encryption_Standard_process" title="Advanced Encryption Standard process">AES 选择过程中</a>向 NIST 提交了一份提案Rijndael 是一系列具有不同密钥和块大小的密码。对于 AES，NIST 选择了 Rijndael 家族的三个成员，每个成员的块大小为 128 位，但有三种不同的密钥长度：128、192 和 256 位。</p>
        
        <hr><p>本文2025-04-24首发于<a href='https://asu1tty.github.io/'>Asu1tty's Blog</a>，最后修改于2025-04-24</p>]]>
      </description>
      
        <category>Crypto</category>
      
    </item>
    
    

    <item>
      <title>HMAC原理及代码实现</title>
      <link>https://asu1tty.github.io/post/mhac/</link>
      <pubDate>Thu, 24 Apr 2025 11:45:36 &#43;0800</pubDate>
      <author>unknow (Asu1tty)</author>
      <guid>https://asu1tty.github.io/post/mhac/</guid>
      <description>
        <![CDATA[<h1>HMAC原理及代码实现</h1><p>作者：Asu1tty（unknow）</p>
        
          <p>HMAC（Hash-based Message Authentication Code，<a href="https://so.csdn.net/so/search?q=%E6%95%A3%E5%88%97&amp;spm=1001.2101.3001.7020">散列</a>消息认证码）是一种使用密码散列函数，同时结合一个加密密钥，通过特别计算方式之后产生的消息认证码（MAC）。
HMAC算法利用哈希运算，以一个密钥和一个消息为输入，生成一个消息摘要作为输出。
hmac算法通常需要以一个hash函数为载体,比如常见的有hmacMd5,hmacSha1,hmacSha256,目前在so里只见到过hmacMd5,hmacSha256,但是hmac的规则是适用所有hash函数的</p>
        
        <hr><p>本文2025-04-24首发于<a href='https://asu1tty.github.io/'>Asu1tty's Blog</a>，最后修改于2025-04-24</p>]]>
      </description>
      
        <category>Crypto</category>
      
    </item>
    
    

    <item>
      <title>SHA-512简介及代码实现</title>
      <link>https://asu1tty.github.io/post/sha-512/</link>
      <pubDate>Wed, 23 Apr 2025 21:10:36 &#43;0800</pubDate>
      <author>unknow (Asu1tty)</author>
      <guid>https://asu1tty.github.io/post/sha-512/</guid>
      <description>
        <![CDATA[<h1>SHA-512简介及代码实现</h1><p>作者：Asu1tty（unknow）</p>
        
          <h2 id="1-算法">
<a class="header-anchor" href="#1-%e7%ae%97%e6%b3%95"></a>
1. 算法
</h2><p><code>SHA-512</code>在app逆向中遇到得很少，所以只作简单介绍
SHA-512可以生成一个被称为消息摘要的512<a href="https://zh.wikipedia.org/wiki/%E4%BD%8D" title="位">位</a>（64<a href="https://zh.wikipedia.org/wiki/%E5%AD%97%E8%8A%82" title="字节">字节</a>）散列值，散列值通常的呈现形式为128个<a href="https://zh.wikipedia.org/wiki/%E5%8D%81%E5%85%AD%E8%BF%9B%E5%88%B6" title="十六进制">十六进制</a>数。与MD5，SHA1，SHA256不同的是，分组长度为1024位，表示消息长度需128位。</p>
<h2 id="2-算法实现过程">
<a class="header-anchor" href="#2-%e7%ae%97%e6%b3%95%e5%ae%9e%e7%8e%b0%e8%bf%87%e7%a8%8b"></a>
2. 算法实现过程
</h2><h3 id="21-填充">
<a class="header-anchor" href="#21-%e5%a1%ab%e5%85%85"></a>
2.1. 填充
</h3><p>以字符串<code>admin</code>为例，十六进制如下</p>
        
        <hr><p>本文2025-04-23首发于<a href='https://asu1tty.github.io/'>Asu1tty's Blog</a>，最后修改于2025-04-23</p>]]>
      </description>
      
        <category>Crypto</category>
      
    </item>
    
    

    <item>
      <title>SHA-256原理及代码实现</title>
      <link>https://asu1tty.github.io/post/sha-256/</link>
      <pubDate>Wed, 23 Apr 2025 17:14:50 &#43;0800</pubDate>
      <author>unknow (Asu1tty)</author>
      <guid>https://asu1tty.github.io/post/sha-256/</guid>
      <description>
        <![CDATA[<h1>SHA-256原理及代码实现</h1><p>作者：Asu1tty（unknow）</p>
        
          <p><strong>SHA256</strong>是SHA-2下细分出的一种算法
SHA-2，名称来自于安全散列算法2（英语：Secure Hash Algorithm 2）的缩写，一种密码散列函数算法标准，由美国国家安全局研发，属于SHA算法之一，是SHA-1的后继者。
SHA-2下又可再分为六个不同的算法标准
包括了：SHA-224、SHA-256、SHA-384、SHA-512、SHA-512/224、SHA-512/256。
SHA-1可以生成一个被称为消息摘要的256<a href="https://zh.wikipedia.org/wiki/%E4%BD%8D" title="位">位</a>（32<a href="https://zh.wikipedia.org/wiki/%E5%AD%97%E8%8A%82" title="字节">字节</a>）散列值，散列值通常的呈现形式为64个<a href="https://zh.wikipedia.org/wiki/%E5%8D%81%E5%85%AD%E8%BF%9B%E5%88%B6" title="十六进制">十六进制</a>数。</p>
        
        <hr><p>本文2025-04-23首发于<a href='https://asu1tty.github.io/'>Asu1tty's Blog</a>，最后修改于2025-04-23</p>]]>
      </description>
      
        <category>Crypto</category>
      
    </item>
    
    

    <item>
      <title>SHA-1原理及代码实现</title>
      <link>https://asu1tty.github.io/post/sha-1/</link>
      <pubDate>Wed, 23 Apr 2025 13:28:36 &#43;0800</pubDate>
      <author>unknow (Asu1tty)</author>
      <guid>https://asu1tty.github.io/post/sha-1/</guid>
      <description>
        <![CDATA[<h1>SHA-1原理及代码实现</h1><p>作者：Asu1tty（unknow）</p>
        
          <p><strong>SHA-1</strong>（英語：Secure Hash Algorithm 1，中文名：安全散列算法1）是一种<a href="https://zh.wikipedia.org/wiki/%E5%AF%86%E7%A0%81%E6%95%A3%E5%88%97%E5%87%BD%E6%95%B0" title="密码散列函数">密码散列函数</a>，<a href="https://zh.wikipedia.org/wiki/%E7%BE%8E%E5%9B%BD%E5%9B%BD%E5%AE%B6%E5%AE%89%E5%85%A8%E5%B1%80" title="美国国家安全局">美国国家安全局</a>设计。SHA-1可以生成一个被称为消息摘要的160<a href="https://zh.wikipedia.org/wiki/%E4%BD%8D" title="位">位</a>（20<a href="https://zh.wikipedia.org/wiki/%E5%AD%97%E8%8A%82" title="字节">字节</a>）散列值，散列值通常的呈现形式为40个<a href="https://zh.wikipedia.org/wiki/%E5%8D%81%E5%85%AD%E8%BF%9B%E5%88%B6" title="十六进制">十六进制</a>数。</p>
<h2 id="1-算法实现过程">
<a class="header-anchor" href="#1-%e7%ae%97%e6%b3%95%e5%ae%9e%e7%8e%b0%e8%bf%87%e7%a8%8b"></a>
1. 算法实现过程
</h2><h3 id="11-第一步填充">
<a class="header-anchor" href="#11-%e7%ac%ac%e4%b8%80%e6%ad%a5%e5%a1%ab%e5%85%85"></a>
1.1. 第一步：填充
</h3><p>以字符串<code>admin</code>为例，十六进制如下</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-plaintext" data-lang="plaintext"><span class="line"><span class="cl">61 64 6D 69 6E
</span></span></code></pre></div><p>需要让它填充到64个字节长度</p>
        
        <hr><p>本文2025-04-23首发于<a href='https://asu1tty.github.io/'>Asu1tty's Blog</a>，最后修改于2025-04-23</p>]]>
      </description>
      
        <category>Crypto</category>
      
    </item>
    
  </channel>
</rss>
