<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Hash on Asu1tty&#39;s Blog</title>
    <link>https://asu1tty.github.io/tags/hash/</link>
    <description>Recent content in Hash on Asu1tty&#39;s Blog</description>
    <generator>Hugo</generator>
    <language>zh-cn</language>
    <lastBuildDate>Thu, 24 Apr 2025 21:10:36 +0800</lastBuildDate>
    <atom:link href="https://asu1tty.github.io/tags/hash/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>AES原理及白盒AES的DFA攻击</title>
      <link>https://asu1tty.github.io/post/wb_aes/</link>
      <pubDate>Thu, 24 Apr 2025 21:10:36 +0800</pubDate>
      <guid>https://asu1tty.github.io/post/wb_aes/</guid>
      <description>&lt;p&gt;AES（&lt;strong&gt;Advanced Encryption Standard&lt;/strong&gt;） &lt;strong&gt;高级加密标准&lt;/strong&gt;是 Rijndael &lt;a href=&#34;https://en.wikipedia.org/wiki/Block_cipher&#34; title=&#34;Block cipher&#34;&gt;分组密码&lt;/a&gt;  的一种变体，由两位密码学家 &lt;a href=&#34;https://en.wikipedia.org/wiki/Joan_Daemen&#34; title=&#34;Joan Daemen&#34;&gt;Joan Daemen&lt;/a&gt; 和 &lt;a href=&#34;https://en.wikipedia.org/wiki/Vincent_Rijmen&#34; title=&#34;Vincent Rijmen&#34;&gt;Vincent Rijmen&lt;/a&gt; 开发，他们在 &lt;a href=&#34;https://en.wikipedia.org/wiki/Advanced_Encryption_Standard_process&#34; title=&#34;Advanced Encryption Standard process&#34;&gt;AES 选择过程中&lt;/a&gt;向 NIST 提交了一份提案Rijndael 是一系列具有不同密钥和块大小的密码。对于 AES，NIST 选择了 Rijndael 家族的三个成员，每个成员的块大小为 128 位，但有三种不同的密钥长度：128、192 和 256 位。&lt;/p&gt;</description>
    </item>
    <item>
      <title>HMAC原理及代码实现</title>
      <link>https://asu1tty.github.io/post/mhac/</link>
      <pubDate>Thu, 24 Apr 2025 11:45:36 +0800</pubDate>
      <guid>https://asu1tty.github.io/post/mhac/</guid>
      <description>&lt;p&gt;HMAC（Hash-based Message Authentication Code，&lt;a href=&#34;https://so.csdn.net/so/search?q=%E6%95%A3%E5%88%97&amp;amp;spm=1001.2101.3001.7020&#34;&gt;散列&lt;/a&gt;消息认证码）是一种使用密码散列函数，同时结合一个加密密钥，通过特别计算方式之后产生的消息认证码（MAC）。&#xA;HMAC算法利用哈希运算，以一个密钥和一个消息为输入，生成一个消息摘要作为输出。&#xA;hmac算法通常需要以一个hash函数为载体,比如常见的有hmacMd5,hmacSha1,hmacSha256,目前在so里只见到过hmacMd5,hmacSha256,但是hmac的规则是适用所有hash函数的&lt;/p&gt;</description>
    </item>
    <item>
      <title>SHA-512简介及代码实现</title>
      <link>https://asu1tty.github.io/post/sha-512/</link>
      <pubDate>Wed, 23 Apr 2025 21:10:36 +0800</pubDate>
      <guid>https://asu1tty.github.io/post/sha-512/</guid>
      <description>&lt;h2 id=&#34;1-算法&#34;&gt;&#xA;&lt;a class=&#34;header-anchor&#34; href=&#34;#1-%e7%ae%97%e6%b3%95&#34;&gt;&lt;/a&gt;&#xA;1. 算法&#xA;&lt;/h2&gt;&lt;p&gt;&lt;code&gt;SHA-512&lt;/code&gt;在app逆向中遇到得很少，所以只作简单介绍&#xA;SHA-1可以生成一个被称为消息摘要的512&lt;a href=&#34;https://zh.wikipedia.org/wiki/%E4%BD%8D&#34; title=&#34;位&#34;&gt;位&lt;/a&gt;（64&lt;a href=&#34;https://zh.wikipedia.org/wiki/%E5%AD%97%E8%8A%82&#34; title=&#34;字节&#34;&gt;字节&lt;/a&gt;）散列值，散列值通常的呈现形式为128个&lt;a href=&#34;https://zh.wikipedia.org/wiki/%E5%8D%81%E5%85%AD%E8%BF%9B%E5%88%B6&#34; title=&#34;十六进制&#34;&gt;十六进制&lt;/a&gt;数。与MD5，SHA1，SHA256不同的是，分组长度为1024位。表示消息长度为128位&lt;/p&gt;&#xA;&lt;h2 id=&#34;2-算法实现过程&#34;&gt;&#xA;&lt;a class=&#34;header-anchor&#34; href=&#34;#2-%e7%ae%97%e6%b3%95%e5%ae%9e%e7%8e%b0%e8%bf%87%e7%a8%8b&#34;&gt;&lt;/a&gt;&#xA;2. 算法实现过程&#xA;&lt;/h2&gt;&lt;h3 id=&#34;21-填充&#34;&gt;&#xA;&lt;a class=&#34;header-anchor&#34; href=&#34;#21-%e5%a1%ab%e5%85%85&#34;&gt;&lt;/a&gt;&#xA;2.1. 填充&#xA;&lt;/h3&gt;&lt;p&gt;以字符串&lt;code&gt;admin&lt;/code&gt;为例，十六进制如下&lt;/p&gt;</description>
    </item>
    <item>
      <title>SHA-256原理及代码实现</title>
      <link>https://asu1tty.github.io/post/sha-256/</link>
      <pubDate>Wed, 23 Apr 2025 17:14:50 +0800</pubDate>
      <guid>https://asu1tty.github.io/post/sha-256/</guid>
      <description>&lt;p&gt;&lt;strong&gt;SHA256&lt;/strong&gt;是SHA-2下细分出的一种算法&#xA;SHA-2，名称来自于安全散列算法2（英语：Secure Hash Algorithm 2）的缩写，一种密码散列函数算法标准，由美国国家安全局研发，属于SHA算法之一，是SHA-1的后继者。&#xA;SHA-2下又可再分为六个不同的算法标准&#xA;包括了：SHA-224、SHA-256、SHA-384、SHA-512、SHA-512/224、SHA-512/256。&#xA;SHA-1可以生成一个被称为消息摘要的256&lt;a href=&#34;https://zh.wikipedia.org/wiki/%E4%BD%8D&#34; title=&#34;位&#34;&gt;位&lt;/a&gt;（32&lt;a href=&#34;https://zh.wikipedia.org/wiki/%E5%AD%97%E8%8A%82&#34; title=&#34;字节&#34;&gt;字节&lt;/a&gt;）散列值，散列值通常的呈现形式为64个&lt;a href=&#34;https://zh.wikipedia.org/wiki/%E5%8D%81%E5%85%AD%E8%BF%9B%E5%88%B6&#34; title=&#34;十六进制&#34;&gt;十六进制&lt;/a&gt;数。&lt;/p&gt;</description>
    </item>
    <item>
      <title>SHA-1原理及代码实现</title>
      <link>https://asu1tty.github.io/post/sha-1/</link>
      <pubDate>Wed, 23 Apr 2025 13:28:36 +0800</pubDate>
      <guid>https://asu1tty.github.io/post/sha-1/</guid>
      <description>&lt;p&gt;&lt;strong&gt;SHA-1&lt;/strong&gt;（英語：Secure Hash Algorithm 1，中文名：安全散列算法1）是一种&lt;a href=&#34;https://zh.wikipedia.org/wiki/%E5%AF%86%E7%A0%81%E6%95%A3%E5%88%97%E5%87%BD%E6%95%B0&#34; title=&#34;密码散列函数&#34;&gt;密码散列函数&lt;/a&gt;，&lt;a href=&#34;https://zh.wikipedia.org/wiki/%E7%BE%8E%E5%9B%BD%E5%9B%BD%E5%AE%B6%E5%AE%89%E5%85%A8%E5%B1%80&#34; title=&#34;美国国家安全局&#34;&gt;美国国家安全局&lt;/a&gt;设计。SHA-1可以生成一个被称为消息摘要的160&lt;a href=&#34;https://zh.wikipedia.org/wiki/%E4%BD%8D&#34; title=&#34;位&#34;&gt;位&lt;/a&gt;（20&lt;a href=&#34;https://zh.wikipedia.org/wiki/%E5%AD%97%E8%8A%82&#34; title=&#34;字节&#34;&gt;字节&lt;/a&gt;）散列值，散列值通常的呈现形式为40个&lt;a href=&#34;https://zh.wikipedia.org/wiki/%E5%8D%81%E5%85%AD%E8%BF%9B%E5%88%B6&#34; title=&#34;十六进制&#34;&gt;十六进制&lt;/a&gt;数。&lt;/p&gt;&#xA;&lt;h2 id=&#34;1-算法实现过程&#34;&gt;&#xA;&lt;a class=&#34;header-anchor&#34; href=&#34;#1-%e7%ae%97%e6%b3%95%e5%ae%9e%e7%8e%b0%e8%bf%87%e7%a8%8b&#34;&gt;&lt;/a&gt;&#xA;1. 算法实现过程&#xA;&lt;/h2&gt;&lt;h3 id=&#34;11-第一步填充&#34;&gt;&#xA;&lt;a class=&#34;header-anchor&#34; href=&#34;#11-%e7%ac%ac%e4%b8%80%e6%ad%a5%e5%a1%ab%e5%85%85&#34;&gt;&lt;/a&gt;&#xA;1.1. 第一步：填充&#xA;&lt;/h3&gt;&lt;p&gt;以字符串&lt;code&gt;admin&lt;/code&gt;为例，十六进制如下&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-plaintext&#34; data-lang=&#34;plaintext&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;61 64 6D 69 6E&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;需要让它填充到64个字节长度&lt;/p&gt;</description>
    </item>
    <item>
      <title>MD5原理及代码实现</title>
      <link>https://asu1tty.github.io/post/md5/</link>
      <pubDate>Wed, 23 Apr 2025 11:48:50 +0800</pubDate>
      <guid>https://asu1tty.github.io/post/md5/</guid>
      <description>&lt;p&gt;&lt;strong&gt;MD5消息摘要算法&lt;/strong&gt;（英语：MD5 Message-Digest Algorithm），一种被广泛使用的&lt;a href=&#34;https://zh.wikipedia.org/wiki/%E5%AF%86%E7%A2%BC%E9%9B%9C%E6%B9%8A%E5%87%BD%E6%95%B8&#34; title=&#34;密码散列函数&#34;&gt;密码散列函数&lt;/a&gt;，可以产生出一个128位（16个&lt;a href=&#34;https://zh.wikipedia.org/wiki/%E5%AD%97%E8%8A%82&#34; title=&#34;字节&#34;&gt;字节&lt;/a&gt;）的&lt;a href=&#34;https://zh.wikipedia.org/wiki/%E6%95%A3%E5%88%97&#34; title=&#34;散列&#34;&gt;散列&lt;/a&gt;值（hash value），用于确保资讯传输完整一致。&#xA;将&lt;a href=&#34;https://zh.wikipedia.org/wiki/%E6%95%B0%E6%8D%AE&#34; title=&#34;数据&#34;&gt;数据&lt;/a&gt;（如一段文字）运算变为另一固定长度值，是散列算法的基础原理。&lt;/p&gt;&#xA;&lt;h2 id=&#34;1-算法&#34;&gt;&#xA;&lt;a class=&#34;header-anchor&#34; href=&#34;#1-%e7%ae%97%e6%b3%95&#34;&gt;&lt;/a&gt;&#xA;1. 算法&#xA;&lt;/h2&gt;&lt;p&gt;MD5是输入不定长度，输出固定长度128-bits的算法。经过程序流程，生成四个32位数据，最后联合起来成为一个128-bits（16字节，通常消息传输中更常见表示为32 个十六进制字符）&lt;a href=&#34;https://zh.wikipedia.org/wiki/%E6%95%A3%E5%88%97&#34; title=&#34;散列&#34;&gt;散列&lt;/a&gt;。&lt;/p&gt;</description>
    </item>
  </channel>
</rss>
