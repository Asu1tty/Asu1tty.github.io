<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>ELF on Asu1tty&#39;s Blog</title>
    <link>https://asu1tty.github.io/tags/elf/</link>
    <description>Recent content in ELF on Asu1tty&#39;s Blog</description>
    <generator>Hugo</generator>
    <language>zh-cn</language>
    <lastBuildDate>Sat, 17 May 2025 11:18:36 +0800</lastBuildDate>
    <atom:link href="https://asu1tty.github.io/tags/elf/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>浅析So加固的三种方式</title>
      <link>https://asu1tty.github.io/post/so-harden/</link>
      <pubDate>Sat, 17 May 2025 11:18:36 +0800</pubDate>
      <guid>https://asu1tty.github.io/post/so-harden/</guid>
      <description>&lt;p&gt;简单分享一下so加固的方案。本文章的代码基于&lt;a href=&#34;https://bbs.kanxue.com/thread-285650.htm&#34;&gt;关于SO加密对抗的两种实现方式&lt;/a&gt;&#xA;在看本篇文章之前，最好需要了解一下ELF文件格式，以及So的加载流程，这里推荐oacia大佬的两篇文章。&lt;a href=&#34;https://oacia.dev/ElfReader/&#34;&gt;ELF结构分析及ElfReader&lt;/a&gt;和&lt;a href=&#34;https://oacia.dev/android-load-so/&#34;&gt;安卓so加载流程源码分析&lt;/a&gt;。&lt;/p&gt;</description>
    </item>
    <item>
      <title>ELF结构及加载流程分析</title>
      <link>https://asu1tty.github.io/post/elfreader/</link>
      <pubDate>Wed, 30 Apr 2025 11:18:36 +0800</pubDate>
      <guid>https://asu1tty.github.io/post/elfreader/</guid>
      <description>&lt;ul&gt;&#xA;&lt;li&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;目前，PC平台流行的 &lt;strong&gt;可执行文件格式（Executable）&lt;/strong&gt; 主要包含如下两种：&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;Windows下的 &lt;strong&gt;PE（Portable Executable）&lt;/strong&gt;&lt;/li&gt;&#xA;&lt;li&gt;Linux下的 &lt;strong&gt;ELF（Executable Linkable Format）&lt;/strong&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;ELF（Executable and Linkable Format，可执行和可链接格式）是Linux系统中广泛使用的文件格式，用于存储可执行文件、目标代码、共享库和核心转储（core dump）。它是一种灵活、通用的格式，支持多种处理器架构和操作系统，具有跨平台特性。&lt;/p&gt;</description>
    </item>
  </channel>
</rss>
