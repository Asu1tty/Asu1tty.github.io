<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>RC4 on My New Hugo Site</title>
    <link>https://asu1tty.github.io/tags/rc4/</link>
    <description>Recent content in RC4 on My New Hugo Site</description>
    <generator>Hugo</generator>
    <language>en</language>
    <lastBuildDate>Fri, 25 Apr 2025 17:21:36 +0800</lastBuildDate>
    <atom:link href="https://asu1tty.github.io/tags/rc4/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>RC4原理及代码实现</title>
      <link>https://asu1tty.github.io/post/rc4/</link>
      <pubDate>Fri, 25 Apr 2025 17:21:36 +0800</pubDate>
      <guid>https://asu1tty.github.io/post/rc4/</guid>
      <description>&lt;p&gt;在&lt;a href=&#34;https://en.wikipedia.org/wiki/Cryptography&#34; title=&#34;Cryptography&#34;&gt;密码学&lt;/a&gt;中，&lt;strong&gt;RC4&lt;/strong&gt;（Rivest Cipher 4，也称为 &lt;strong&gt;ARC4&lt;/strong&gt; 或 &lt;strong&gt;ARCFOUR，&lt;/strong&gt; 意思是Alleged（所谓的） RC4）是一种&lt;a href=&#34;https://en.wikipedia.org/wiki/Stream_cipher&#34; title=&#34;Stream cipher&#34;&gt;流密码&lt;/a&gt; 。虽然它在软件中以其简单性和速度而著称，但在 RC4 中发现了多个漏洞，使其不安全。&#xA;流密码（streamcipher）是对数据流进行连续处理的一类密码算法。流密码中一般以1比特、8比特或32比特等为单位进行加密和解密。其中RC4的加解密单位为8比特，也就是一个字节。&lt;/p&gt;&#xA;&lt;h2 id=&#34;1-密码学中为什么经常使用异或&#34;&gt;&#xA;&lt;a class=&#34;header-anchor&#34; href=&#34;#1-%e5%af%86%e7%a0%81%e5%ad%a6%e4%b8%ad%e4%b8%ba%e4%bb%80%e4%b9%88%e7%bb%8f%e5%b8%b8%e4%bd%bf%e7%94%a8%e5%bc%82%e6%88%96&#34;&gt;&lt;/a&gt;&#xA;1. 密码学中为什么经常使用异或？&#xA;&lt;/h2&gt;&lt;p&gt;在密码学中经常使用异或运算，&lt;code&gt;RC4&lt;/code&gt;的原理也依赖异或运算。&#xA;下面解释摘自《图解密码技术 第三版》&lt;/p&gt;&#xA;&lt;p&gt;&lt;code&gt;由于两个相同的数进行XOR运算的结果一定为0，因此如果将A⊕B的结果再与B进行XOR运算，则结果会变回A。也就是说，两个公式中的B会相互抵消。&lt;/code&gt;&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;将明文A用密钥B进行加密，得到密文A⊕B&lt;/li&gt;&#xA;&lt;li&gt;将密文A⊕B用密钥B进行解密，得到明文A&#xA;&lt;img src=&#34;https://cdn.jsdelivr.net/gh/Asu1tty/blog_img@master/picSource/image-20250425172319106.png&#34; alt=&#34;image-20250425172319106&#34;&gt;&#xA;图片摘自《图解密码技术 第三版》&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;&lt;code&gt;从图中可以看出，执行一次蒙版操作后，原来的图像被隐藏（掩盖）了，而执行两次蒙版操作后，就又可以得到原来的图像了。&lt;/code&gt;&#xA;&lt;code&gt;如果所使用的蒙版是完全随机的比特序列，则使用XOR就可以将原来的图像掩盖起来。但如果蒙版中的比特序列的排列是可以被推测出来的，那么实质上图像就没有被真正掩盖。对于密码技术来说，“是否可以预测”是非常重要的一点。能够产生不可预测的比特序列，对于密码技术的贡献是巨大的。这种不可预测的比特序列就称为随机数。&lt;/code&gt;&lt;/p&gt;&#xA;&lt;h2 id=&#34;2-算法实现过程&#34;&gt;&#xA;&lt;a class=&#34;header-anchor&#34; href=&#34;#2-%e7%ae%97%e6%b3%95%e5%ae%9e%e7%8e%b0%e8%bf%87%e7%a8%8b&#34;&gt;&lt;/a&gt;&#xA;2. 算法实现过程&#xA;&lt;/h2&gt;&lt;h3 id=&#34;21-ksakey-scheduling-algorithm&#34;&gt;&#xA;&lt;a class=&#34;header-anchor&#34; href=&#34;#21-ksakey-scheduling-algorithm&#34;&gt;&lt;/a&gt;&#xA;2.1. KSA(key-scheduling algorithm)&#xA;&lt;/h3&gt;&lt;p&gt;使用密钥调度算法(key-scheduling algorithm)&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;strong&gt;输入&lt;/strong&gt;：一个可变长度的密钥（通常8-2048位）。&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;输出&lt;/strong&gt;：一个256字节的置换数组S（S[0]到S[255]）。&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h4 id=&#34;211-第一步&#34;&gt;&#xA;&lt;a class=&#34;header-anchor&#34; href=&#34;#211-%e7%ac%ac%e4%b8%80%e6%ad%a5&#34;&gt;&lt;/a&gt;&#xA;2.1.1. 第一步&#xA;&lt;/h4&gt;&lt;p&gt;先初始化256字节的数组S，填充0到255的整数，即S[0]=0, S[1]=1, &amp;hellip;, S[255]=255。&lt;/p&gt;&#xA;&lt;h4 id=&#34;212-第二步&#34;&gt;&#xA;&lt;a class=&#34;header-anchor&#34; href=&#34;#212-%e7%ac%ac%e4%ba%8c%e6%ad%a5&#34;&gt;&lt;/a&gt;&#xA;2.1.2. 第二步&#xA;&lt;/h4&gt;&lt;p&gt;创建一个临时数组T，长度与密钥相同，将密钥循环填充到T中（如果密钥长度不足256字节，则重复密钥）。&lt;/p&gt;&#xA;&lt;h4 id=&#34;213-第三步&#34;&gt;&#xA;&lt;a class=&#34;header-anchor&#34; href=&#34;#213-%e7%ac%ac%e4%b8%89%e6%ad%a5&#34;&gt;&lt;/a&gt;&#xA;2.1.3. 第三步&#xA;&lt;/h4&gt;&lt;p&gt;使用以下伪代码进行置换&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;for i = 0 to 255&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    j = (j + S[i] + T[i]) mod 256&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    swap S[i] and S[j]&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;S数组被打乱，形成一个基于密钥的伪随机置换表。这样处理之后，就得到了介绍中提到的&lt;code&gt;不可预测的比特序列&lt;/code&gt;&lt;/p&gt;</description>
    </item>
  </channel>
</rss>
