<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Crypto on My New Hugo Site</title>
    <link>https://example.org/categories/crypto/</link>
    <description>Recent content from My New Hugo Site</description>
    <generator>Hugo</generator>
    <language>en</language>
    
    <managingEditor>unknow (Asu1tty)</managingEditor>
    <webMaster>unknow (Asu1tty)</webMaster>
    
    <copyright>All articles on this blog are licensed under the BY-NC-SA license agreement unless otherwise stated. Please indicate the source when reprinting!</copyright>
    
    <lastBuildDate>Fri, 25 Apr 2025 17:21:36 +0800</lastBuildDate>
    
    
    <atom:link href="https://example.org/categories/crypto/index.xml" rel="self" type="application/rss&#43;xml" />
    

    
    

    <item>
      <title>RC4原理及代码实现</title>
      <link>https://example.org/post/rc4/</link>
      <pubDate>Fri, 25 Apr 2025 17:21:36 &#43;0800</pubDate>
      <author>unknow (Asu1tty)</author>
      <guid>https://example.org/post/rc4/</guid>
      <description>
        <![CDATA[<h1>RC4原理及代码实现</h1><p>Author: Asu1tty(unknow)</p>
        
          <p>在<a href="https://en.wikipedia.org/wiki/Cryptography" title="Cryptography">密码学</a>中，<strong>RC4</strong>（Rivest Cipher 4，也称为 <strong>ARC4</strong> 或 <strong>ARCFOUR，</strong> 意思是Alleged（所谓的） RC4）是一种<a href="https://en.wikipedia.org/wiki/Stream_cipher" title="Stream cipher">流密码</a> 。虽然它在软件中以其简单性和速度而著称，但在 RC4 中发现了多个漏洞，使其不安全。
流密码（streamcipher）是对数据流进行连续处理的一类密码算法。流密码中一般以1比特、8比特或32比特等为单位进行加密和解密。其中RC4的加解密单位为8比特，也就是一个字节。</p>
<h2 id="1-密码学中为什么经常使用异或">
<a class="header-anchor" href="#1-%e5%af%86%e7%a0%81%e5%ad%a6%e4%b8%ad%e4%b8%ba%e4%bb%80%e4%b9%88%e7%bb%8f%e5%b8%b8%e4%bd%bf%e7%94%a8%e5%bc%82%e6%88%96"></a>
1. 密码学中为什么经常使用异或？
</h2><p>在密码学中经常使用异或运算，<code>RC4</code>的原理也依赖异或运算。
下面解释摘自《图解密码技术 第三版》</p>
<p><code>由于两个相同的数进行XOR运算的结果一定为0，因此如果将A⊕B的结果再与B进行XOR运算，则结果会变回A。也就是说，两个公式中的B会相互抵消。</code></p>
<ul>
<li>将明文A用密钥B进行加密，得到密文A⊕B</li>
<li>将密文A⊕B用密钥B进行解密，得到明文A
<img src="https://cdn.jsdelivr.net/gh/Asu1tty/blog_img@master/picSource/image-20250425172319106.png" alt="image-20250425172319106">
图片摘自《图解密码技术 第三版》</li>
</ul>
<p><code>从图中可以看出，执行一次蒙版操作后，原来的图像被隐藏（掩盖）了，而执行两次蒙版操作后，就又可以得到原来的图像了。</code>
<code>如果所使用的蒙版是完全随机的比特序列，则使用XOR就可以将原来的图像掩盖起来。但如果蒙版中的比特序列的排列是可以被推测出来的，那么实质上图像就没有被真正掩盖。对于密码技术来说，“是否可以预测”是非常重要的一点。能够产生不可预测的比特序列，对于密码技术的贡献是巨大的。这种不可预测的比特序列就称为随机数。</code></p>
<h2 id="2-算法实现过程">
<a class="header-anchor" href="#2-%e7%ae%97%e6%b3%95%e5%ae%9e%e7%8e%b0%e8%bf%87%e7%a8%8b"></a>
2. 算法实现过程
</h2><h3 id="21-ksakey-scheduling-algorithm">
<a class="header-anchor" href="#21-ksakey-scheduling-algorithm"></a>
2.1. KSA(key-scheduling algorithm)
</h3><p>使用密钥调度算法(key-scheduling algorithm)</p>
<ul>
<li><strong>输入</strong>：一个可变长度的密钥（通常8-2048位）。</li>
<li><strong>输出</strong>：一个256字节的置换数组S（S[0]到S[255]）。</li>
</ul>
<h4 id="211-第一步">
<a class="header-anchor" href="#211-%e7%ac%ac%e4%b8%80%e6%ad%a5"></a>
2.1.1. 第一步
</h4><p>先初始化256字节的数组S，填充0到255的整数，即S[0]=0, S[1]=1, &hellip;, S[255]=255。</p>
<h4 id="212-第二步">
<a class="header-anchor" href="#212-%e7%ac%ac%e4%ba%8c%e6%ad%a5"></a>
2.1.2. 第二步
</h4><p>创建一个临时数组T，长度与密钥相同，将密钥循环填充到T中（如果密钥长度不足256字节，则重复密钥）。</p>
<h4 id="213-第三步">
<a class="header-anchor" href="#213-%e7%ac%ac%e4%b8%89%e6%ad%a5"></a>
2.1.3. 第三步
</h4><p>使用以下伪代码进行置换</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">for i = 0 to 255
</span></span><span class="line"><span class="cl">    j = (j + S[i] + T[i]) mod 256
</span></span><span class="line"><span class="cl">    swap S[i] and S[j]
</span></span></code></pre></div><p>S数组被打乱，形成一个基于密钥的伪随机置换表。这样处理之后，就得到了介绍中提到的<code>不可预测的比特序列</code></p>
        
        <hr><p>Published on 2025-04-25 at <a href='https://example.org/'>My New Hugo Site</a>, last modified on 2025-04-25</p>]]>
      </description>
      
        <category>Crypto</category>
      
    </item>
    
    

    <item>
      <title>AES原理及白盒AES的DFA攻击</title>
      <link>https://example.org/post/wb_aes/</link>
      <pubDate>Thu, 24 Apr 2025 21:10:36 &#43;0800</pubDate>
      <author>unknow (Asu1tty)</author>
      <guid>https://example.org/post/wb_aes/</guid>
      <description>
        <![CDATA[<h1>AES原理及白盒AES的DFA攻击</h1><p>Author: Asu1tty(unknow)</p>
        
          <p>AES（<strong>Advanced Encryption Standard</strong>） <strong>高级加密标准</strong>是 Rijndael <a href="https://en.wikipedia.org/wiki/Block_cipher" title="Block cipher">分组密码</a>  的一种变体，由两位密码学家 <a href="https://en.wikipedia.org/wiki/Joan_Daemen" title="Joan Daemen">Joan Daemen</a> 和 <a href="https://en.wikipedia.org/wiki/Vincent_Rijmen" title="Vincent Rijmen">Vincent Rijmen</a> 开发，他们在 <a href="https://en.wikipedia.org/wiki/Advanced_Encryption_Standard_process" title="Advanced Encryption Standard process">AES 选择过程中</a>向 NIST 提交了一份提案Rijndael 是一系列具有不同密钥和块大小的密码。对于 AES，NIST 选择了 Rijndael 家族的三个成员，每个成员的块大小为 128 位，但有三种不同的密钥长度：128、192 和 256 位。</p>
<h2 id="1-aes分类">
<a class="header-anchor" href="#1-aes%e5%88%86%e7%b1%bb"></a>
1. AES分类
</h2><table>
  <thead>
      <tr>
          <th>分类</th>
          <th>密钥长度</th>
          <th>轮密钥长度</th>
          <th>扩展密钥长度</th>
          <th>分组长度</th>
          <th>加密轮数</th>
      </tr>
  </thead>
  <tbody>
      <tr>
          <td>AES-128</td>
          <td>16字节</td>
          <td>16字节</td>
          <td>16*11=172</td>
          <td>16字节</td>
          <td>10</td>
      </tr>
      <tr>
          <td>AES-192</td>
          <td>24字节</td>
          <td>16字节</td>
          <td>16*13=208</td>
          <td>16字节</td>
          <td>12</td>
      </tr>
      <tr>
          <td>AES-256</td>
          <td>32字节</td>
          <td>16字节</td>
          <td>16*15=240</td>
          <td>16字节</td>
          <td>14</td>
      </tr>
  </tbody>
</table>
<p>AES 128 192 256 除了密钥编排算法不一样和加密轮数不一样 其余的计算逻辑相同</p>
<p>AES 128 192 256 CBC 模式IV的长度都是16个字节 CBC计算逻辑相同</p>
        
        <hr><p>Published on 2025-04-24 at <a href='https://example.org/'>My New Hugo Site</a>, last modified on 2025-04-24</p>]]>
      </description>
      
        <category>Crypto</category>
      
    </item>
    
    

    <item>
      <title>HMAC原理及代码实现</title>
      <link>https://example.org/post/mhac/</link>
      <pubDate>Thu, 24 Apr 2025 11:45:36 &#43;0800</pubDate>
      <author>unknow (Asu1tty)</author>
      <guid>https://example.org/post/mhac/</guid>
      <description>
        <![CDATA[<h1>HMAC原理及代码实现</h1><p>Author: Asu1tty(unknow)</p>
        
          <p>HMAC（Hash-based Message Authentication Code，<a href="https://so.csdn.net/so/search?q=%E6%95%A3%E5%88%97&amp;spm=1001.2101.3001.7020">散列</a>消息认证码）是一种使用密码散列函数，同时结合一个加密密钥，通过特别计算方式之后产生的消息认证码（MAC）。
HMAC算法利用哈希运算，以一个密钥和一个消息为输入，生成一个消息摘要作为输出。
hmac算法通常需要以一个hash函数为载体,比如常见的有hmacMd5,hmacSha1,hmacSha256,目前在so里只见到过hmacMd5,hmacSha256,但是hmac的规则是适用所有hash函数的</p>
<p>HMAC算法的数学公式为：
<img src="https://wikimedia.org/api/rest_v1/media/math/render/svg/fb67423fa152e335f482c2a885c9f2bbed812e81" alt="{\displaystyle {\textit {HMAC}}(K,m)=H{\Bigl (}(K’\oplus opad)\;||\;H{\bigl (}(K’\oplus ipad)\;||\;m{\bigr )}{\Bigr )}}">
其中：</p>
<p><strong>H</strong> 为密码Hash函数（如MD5或SHA-2)，能够对明文进行分组循环压缩；</p>
<p><strong>K</strong> 为密钥（secret key）；</p>
<p><strong>m</strong> 为要认证的消息；</p>
<p><strong>K’</strong> 是从原始密钥 k 导出的另一个密钥（如果 k 短于散列函数的输入块大小，则向右填充零；如果比该块大小更长，则对 k 进行散列）；</p>
<p><strong>ipad</strong> 内部填充（0x5C5C5C…5C5C，一段十六进制常量）；</p>
<p><strong>opad</strong> 外部填充（0x363636…3636，一段十六进制常量)；</p>
<p><strong>⊕</strong>：按位异或运算。</p>
<p><strong>||</strong>：字符串拼接。</p>
<p>总结8个字就是:<strong>两次加盐,两次hash</strong>。</p>
<h2 id="1-算法实现过程">
<a class="header-anchor" href="#1-%e7%ae%97%e6%b3%95%e5%ae%9e%e7%8e%b0%e8%bf%87%e7%a8%8b"></a>
1. 算法实现过程
</h2><p>HMAC需要选择一个哈希函数作为实现的载体，这里以MD5为例</p>
<h3 id="11-第一步扩展密钥">
<a class="header-anchor" href="#11-%e7%ac%ac%e4%b8%80%e6%ad%a5%e6%89%a9%e5%b1%95%e5%af%86%e9%92%a5"></a>
1.1. 第一步：扩展密钥
</h3><p>以字符串<code>admin</code>为例，十六进制如下</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-plaintext" data-lang="plaintext"><span class="line"><span class="cl">61 64 6D 69 6E
</span></span></code></pre></div><p>填充密钥到64字节</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-plaintext" data-lang="plaintext"><span class="line"><span class="cl">61 64 6D 69 6E 00(填充59次)
</span></span></code></pre></div><h3 id="12-异或0x36">
<a class="header-anchor" href="#12-%e5%bc%82%e6%88%960x36"></a>
1.2. 异或0x36
</h3><p>将密钥逐字节异或0x36，得到<strong>扩展密钥1</strong>，0x36十进制是54</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-plaintext" data-lang="plaintext"><span class="line"><span class="cl">57 52 5b 5f 58 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36
</span></span></code></pre></div><h3 id="13-异或0x5c">
<a class="header-anchor" href="#13-%e5%bc%82%e6%88%960x5c"></a>
1.3. 异或0x5C
</h3><p>将密钥逐字节异或0x5c，得到<strong>扩展密钥2</strong>，0x5C十进制是92</p>
        
        <hr><p>Published on 2025-04-24 at <a href='https://example.org/'>My New Hugo Site</a>, last modified on 2025-04-24</p>]]>
      </description>
      
        <category>Crypto</category>
      
    </item>
    
    

    <item>
      <title>SHA-512简介及代码实现</title>
      <link>https://example.org/post/sha-512/</link>
      <pubDate>Wed, 23 Apr 2025 21:10:36 &#43;0800</pubDate>
      <author>unknow (Asu1tty)</author>
      <guid>https://example.org/post/sha-512/</guid>
      <description>
        <![CDATA[<h1>SHA-512简介及代码实现</h1><p>Author: Asu1tty(unknow)</p>
        
          <h2 id="1-算法">
<a class="header-anchor" href="#1-%e7%ae%97%e6%b3%95"></a>
1. 算法
</h2><p><code>SHA-512</code>在app逆向中遇到得很少，所以只作简单介绍
SHA-1可以生成一个被称为消息摘要的512<a href="https://zh.wikipedia.org/wiki/%E4%BD%8D" title="位">位</a>（64<a href="https://zh.wikipedia.org/wiki/%E5%AD%97%E8%8A%82" title="字节">字节</a>）散列值，散列值通常的呈现形式为128个<a href="https://zh.wikipedia.org/wiki/%E5%8D%81%E5%85%AD%E8%BF%9B%E5%88%B6" title="十六进制">十六进制</a>数。与MD5，SHA1，SHA256不同的是，分组长度为1024位。表示消息长度为128位</p>
<h2 id="2-算法实现过程">
<a class="header-anchor" href="#2-%e7%ae%97%e6%b3%95%e5%ae%9e%e7%8e%b0%e8%bf%87%e7%a8%8b"></a>
2. 算法实现过程
</h2><h3 id="21-填充">
<a class="header-anchor" href="#21-%e5%a1%ab%e5%85%85"></a>
2.1. 填充
</h3><p>以字符串<code>admin</code>为例，十六进制如下</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-plaintext" data-lang="plaintext"><span class="line"><span class="cl">61 64 6D 69 6E
</span></span></code></pre></div><p>首先需要填充到128字节，即先添加一个“1”，再后跟多个“0”，然后再追加一个128位的消息长度信息
第一位填充 0x80 剩下的填充 0 直到达到 112 个字节
填充K个“0”，所不同的是消息分组的长度是1024位，所以K的取值必须是满足下述表达式的最小非负整数值。
<code>( L + 1 + K ) mod 1024 = 896</code></p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-plaintext" data-lang="plaintext"><span class="line"><span class="cl">61 64 6D 69 6E 80 0(填充106次) 共 112 个字节
</span></span></code></pre></div><p>对比md5,sha1,sha256填充都是64字节分组,sha512是128字节分组,原因就在于无论是iv还是k都是8字节的,所以数据块也是8字节的</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-plaintext" data-lang="plaintext"><span class="line"><span class="cl">sha512
</span></span><span class="line"><span class="cl">H = [
</span></span><span class="line"><span class="cl">    0x6a09e667f3bcc908, 0xbb67ae8584caa73b,
</span></span><span class="line"><span class="cl">    0x3c6ef372fe94f82b, 0xa54ff53a5f1d36f1,
</span></span><span class="line"><span class="cl">    0x510e527fade682d1, 0x9b05688c2b3e6c1f,
</span></span><span class="line"><span class="cl">    0x1f83d9abfb41bd6b, 0x5be0cd19137e2179
</span></span><span class="line"><span class="cl">]
</span></span><span class="line"><span class="cl">sha256
</span></span><span class="line"><span class="cl">H = [
</span></span><span class="line"><span class="cl">    0x6a09e667, 0xbb67ae85, 0x3c6ef372, 0xa54ff53a,
</span></span><span class="line"><span class="cl">    0x510e527f, 0x9b05688c, 0x1f83d9ab, 0x5be0cd19
</span></span><span class="line"><span class="cl">]
</span></span></code></pre></div><p>sha512的高4字节是sha256的4字节,同理k表也是这样</p>
        
        <hr><p>Published on 2025-04-23 at <a href='https://example.org/'>My New Hugo Site</a>, last modified on 2025-04-23</p>]]>
      </description>
      
        <category>Crypto</category>
      
    </item>
    
    

    <item>
      <title>SHA-256原理及代码实现</title>
      <link>https://example.org/post/sha-256/</link>
      <pubDate>Wed, 23 Apr 2025 17:14:50 &#43;0800</pubDate>
      <author>unknow (Asu1tty)</author>
      <guid>https://example.org/post/sha-256/</guid>
      <description>
        <![CDATA[<h1>SHA-256原理及代码实现</h1><p>Author: Asu1tty(unknow)</p>
        
          <p><strong>SHA256</strong>是SHA-2下细分出的一种算法
SHA-2，名称来自于安全散列算法2（英语：Secure Hash Algorithm 2）的缩写，一种密码散列函数算法标准，由美国国家安全局研发，属于SHA算法之一，是SHA-1的后继者。
SHA-2下又可再分为六个不同的算法标准
包括了：SHA-224、SHA-256、SHA-384、SHA-512、SHA-512/224、SHA-512/256。
SHA-1可以生成一个被称为消息摘要的256<a href="https://zh.wikipedia.org/wiki/%E4%BD%8D" title="位">位</a>（32<a href="https://zh.wikipedia.org/wiki/%E5%AD%97%E8%8A%82" title="字节">字节</a>）散列值，散列值通常的呈现形式为64个<a href="https://zh.wikipedia.org/wiki/%E5%8D%81%E5%85%AD%E8%BF%9B%E5%88%B6" title="十六进制">十六进制</a>数。</p>
<h2 id="1-算法实现过程">
<a class="header-anchor" href="#1-%e7%ae%97%e6%b3%95%e5%ae%9e%e7%8e%b0%e8%bf%87%e7%a8%8b"></a>
1. 算法实现过程
</h2><h3 id="11-第一步填充">
<a class="header-anchor" href="#11-%e7%ac%ac%e4%b8%80%e6%ad%a5%e5%a1%ab%e5%85%85"></a>
1.1. 第一步：填充
</h3><p>以字符串<code>admin</code>为例，十六进制如下</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-plaintext" data-lang="plaintext"><span class="line"><span class="cl">61 64 6D 69 6E
</span></span></code></pre></div><p>首先需要填充到64字节
第一位填充 0x80 剩下的填充 0 直到达到 56 个字节</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-plaintext" data-lang="plaintext"><span class="line"><span class="cl">61 64 6D 69 6E 80 0(填充50次) 共 56 个字节
</span></span></code></pre></div><p>接下来 8 个字节
第一位填充消息长度 * 8，也就是5 * 8 = 40 = 0x28</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-plaintext" data-lang="plaintext"><span class="line"><span class="cl">61 64 6D 69 6E 80 0(填充50次) 0(填充7次) 0x28 共 64 个字节
</span></span></code></pre></div><p>sha-256和sha-1的填充一样,对比md5,sha-1,sha-256,填充几乎都一样,唯一不同之处就是md5的附加消息长度是小端序,其余两个是大端序。</p>
<h3 id="12-第二步扩充">
<a class="header-anchor" href="#12-%e7%ac%ac%e4%ba%8c%e6%ad%a5%e6%89%a9%e5%85%85"></a>
1.2. 第二步：扩充
</h3><ul>
<li>需要将16个四字节扩充至64个四字节</li>
<li>前16个四字节复制填充后的16个四字节</li>
<li>后48个四字节使用扩充算法进行扩充</li>
</ul>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="n">sha256</span>
</span></span><span class="line"><span class="cl"><span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mi">16</span><span class="p">,</span> <span class="mi">64</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">    <span class="n">s0</span> <span class="o">=</span> <span class="n">right_rotate</span><span class="p">(</span><span class="n">W</span><span class="p">[</span><span class="n">i</span><span class="o">-</span><span class="mi">15</span><span class="p">],</span> <span class="mi">7</span><span class="p">)</span> <span class="o">^</span> <span class="n">right_rotate</span><span class="p">(</span><span class="n">W</span><span class="p">[</span><span class="n">i</span><span class="o">-</span><span class="mi">15</span><span class="p">],</span> <span class="mi">18</span><span class="p">)</span> <span class="o">^</span> <span class="p">(</span><span class="n">W</span><span class="p">[</span><span class="n">i</span><span class="o">-</span><span class="mi">15</span><span class="p">]</span> <span class="o">&gt;&gt;</span> <span class="mi">3</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="n">s1</span> <span class="o">=</span> <span class="n">right_rotate</span><span class="p">(</span><span class="n">W</span><span class="p">[</span><span class="n">i</span><span class="o">-</span><span class="mi">2</span><span class="p">],</span> <span class="mi">17</span><span class="p">)</span> <span class="o">^</span> <span class="n">right_rotate</span><span class="p">(</span><span class="n">W</span><span class="p">[</span><span class="n">i</span><span class="o">-</span><span class="mi">2</span><span class="p">],</span> <span class="mi">19</span><span class="p">)</span> <span class="o">^</span> <span class="p">(</span><span class="n">W</span><span class="p">[</span><span class="n">i</span><span class="o">-</span><span class="mi">2</span><span class="p">]</span> <span class="o">&gt;&gt;</span> <span class="mi">10</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="n">W</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">=</span> <span class="p">(</span><span class="n">W</span><span class="p">[</span><span class="n">i</span><span class="o">-</span><span class="mi">16</span><span class="p">]</span> <span class="o">+</span> <span class="n">s0</span> <span class="o">+</span> <span class="n">W</span><span class="p">[</span><span class="n">i</span><span class="o">-</span><span class="mi">7</span><span class="p">]</span> <span class="o">+</span> <span class="n">s1</span><span class="p">)</span> <span class="o">&amp;</span> <span class="mh">0xffffffff</span>
</span></span><span class="line"><span class="cl"><span class="n">sha1</span>
</span></span><span class="line"><span class="cl"><span class="k">for</span> <span class="n">j</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mi">16</span><span class="p">,</span> <span class="mi">80</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">    <span class="n">w</span><span class="p">[</span><span class="n">j</span><span class="p">]</span> <span class="o">=</span> <span class="n">left_rotate</span><span class="p">(</span><span class="n">w</span><span class="p">[</span><span class="n">j</span> <span class="o">-</span> <span class="mi">3</span><span class="p">]</span> <span class="o">^</span> <span class="n">w</span><span class="p">[</span><span class="n">j</span> <span class="o">-</span> <span class="mi">8</span><span class="p">]</span> <span class="o">^</span> <span class="n">w</span><span class="p">[</span><span class="n">j</span> <span class="o">-</span> <span class="mi">14</span><span class="p">]</span> <span class="o">^</span> <span class="n">w</span><span class="p">[</span><span class="n">j</span> <span class="o">-</span> <span class="mi">16</span><span class="p">],</span> <span class="mi">1</span><span class="p">)</span>
</span></span></code></pre></div><p>和sha-1的区别在于sha-1扩展64轮,sha-256扩展48轮,还有就是扩展的方式不一样。</p>
        
        <hr><p>Published on 2025-04-23 at <a href='https://example.org/'>My New Hugo Site</a>, last modified on 2025-04-23</p>]]>
      </description>
      
        <category>Crypto</category>
      
    </item>
    
    

    <item>
      <title>SHA-1原理及代码实现</title>
      <link>https://example.org/post/sha-1/</link>
      <pubDate>Wed, 23 Apr 2025 13:28:36 &#43;0800</pubDate>
      <author>unknow (Asu1tty)</author>
      <guid>https://example.org/post/sha-1/</guid>
      <description>
        <![CDATA[<h1>SHA-1原理及代码实现</h1><p>Author: Asu1tty(unknow)</p>
        
          <p><strong>SHA-1</strong>（英語：Secure Hash Algorithm 1，中文名：安全散列算法1）是一种<a href="https://zh.wikipedia.org/wiki/%E5%AF%86%E7%A0%81%E6%95%A3%E5%88%97%E5%87%BD%E6%95%B0" title="密码散列函数">密码散列函数</a>，<a href="https://zh.wikipedia.org/wiki/%E7%BE%8E%E5%9B%BD%E5%9B%BD%E5%AE%B6%E5%AE%89%E5%85%A8%E5%B1%80" title="美国国家安全局">美国国家安全局</a>设计。SHA-1可以生成一个被称为消息摘要的160<a href="https://zh.wikipedia.org/wiki/%E4%BD%8D" title="位">位</a>（20<a href="https://zh.wikipedia.org/wiki/%E5%AD%97%E8%8A%82" title="字节">字节</a>）散列值，散列值通常的呈现形式为40个<a href="https://zh.wikipedia.org/wiki/%E5%8D%81%E5%85%AD%E8%BF%9B%E5%88%B6" title="十六进制">十六进制</a>数。</p>
<h2 id="1-算法实现过程">
<a class="header-anchor" href="#1-%e7%ae%97%e6%b3%95%e5%ae%9e%e7%8e%b0%e8%bf%87%e7%a8%8b"></a>
1. 算法实现过程
</h2><h3 id="11-第一步填充">
<a class="header-anchor" href="#11-%e7%ac%ac%e4%b8%80%e6%ad%a5%e5%a1%ab%e5%85%85"></a>
1.1. 第一步：填充
</h3><p>以字符串<code>admin</code>为例，十六进制如下</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-plaintext" data-lang="plaintext"><span class="line"><span class="cl">61 64 6D 69 6E
</span></span></code></pre></div><p>需要让它填充到64个字节长度</p>
<p>第一位填充 0x80 剩下的填充 0 直到达到 56 个字节</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-plaintext" data-lang="plaintext"><span class="line"><span class="cl">61 64 6D 69 6E 80 0(填充50次) 共 56 个字节
</span></span></code></pre></div><p>接下来 8 个字节
消息长度 * 8，也就是5 * 8 = 40 = 0x28</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-plaintext" data-lang="plaintext"><span class="line"><span class="cl">61 64 6D 69 6E 80 0(填充50次) 0(填充7次) 0x28 共 64 个字节
</span></span></code></pre></div><p>填充这块唯一和md5有区别的就是,最后的附加消息长度是大端续,也就是正常的顺序
64字节的分组长度,md5,sha1,sha256都是, sha512是128字节分组。</p>
<h3 id="12-第二步扩充">
<a class="header-anchor" href="#12-%e7%ac%ac%e4%ba%8c%e6%ad%a5%e6%89%a9%e5%85%85"></a>
1.2. 第二步：扩充
</h3><p>sha1有80轮循环,每一轮要用不同的数据,而填充后的最多只有16个4字节数据,所以需要进行扩展</p>
<p>前16个四字节复制填充后的16个四字节
后64个四字节使用扩充算法进行扩充
当前位置值 =（ 前面第3个四字节 ^ 前面第8个四字节 ^ 前面第14个四字节 ^ 前面第16个四字节 ）&laquo; 1</p>
        
        <hr><p>Published on 2025-04-23 at <a href='https://example.org/'>My New Hugo Site</a>, last modified on 2025-04-23</p>]]>
      </description>
      
        <category>Crypto</category>
      
    </item>
    
    

    <item>
      <title>MD5原理及代码实现</title>
      <link>https://example.org/post/md5/</link>
      <pubDate>Wed, 23 Apr 2025 11:48:50 &#43;0800</pubDate>
      <author>unknow (Asu1tty)</author>
      <guid>https://example.org/post/md5/</guid>
      <description>
        <![CDATA[<h1>MD5原理及代码实现</h1><p>Author: Asu1tty(unknow)</p>
        
          <p><strong>MD5消息摘要算法</strong>（英语：MD5 Message-Digest Algorithm），一种被广泛使用的<a href="https://zh.wikipedia.org/wiki/%E5%AF%86%E7%A2%BC%E9%9B%9C%E6%B9%8A%E5%87%BD%E6%95%B8" title="密码散列函数">密码散列函数</a>，可以产生出一个128位（16个<a href="https://zh.wikipedia.org/wiki/%E5%AD%97%E8%8A%82" title="字节">字节</a>）的<a href="https://zh.wikipedia.org/wiki/%E6%95%A3%E5%88%97" title="散列">散列</a>值（hash value），用于确保资讯传输完整一致。
将<a href="https://zh.wikipedia.org/wiki/%E6%95%B0%E6%8D%AE" title="数据">数据</a>（如一段文字）运算变为另一固定长度值，是散列算法的基础原理。</p>
<h2 id="1-算法">
<a class="header-anchor" href="#1-%e7%ae%97%e6%b3%95"></a>
1. 算法
</h2><p>MD5是输入不定长度，输出固定长度128-bits的算法。经过程序流程，生成四个32位数据，最后联合起来成为一个128-bits（16字节，通常消息传输中更常见表示为32 个十六进制字符）<a href="https://zh.wikipedia.org/wiki/%E6%95%A3%E5%88%97" title="散列">散列</a>。</p>
<h2 id="2-算法实现过程">
<a class="header-anchor" href="#2-%e7%ae%97%e6%b3%95%e5%ae%9e%e7%8e%b0%e8%bf%87%e7%a8%8b"></a>
2. 算法实现过程
</h2><h3 id="21-第一步填充">
<a class="header-anchor" href="#21-%e7%ac%ac%e4%b8%80%e6%ad%a5%e5%a1%ab%e5%85%85"></a>
2.1. 第一步：填充
</h3><p>MD5 的输入数据需要满足以下条件：</p>
<ul>
<li>数据长度（以位为单位）模 512 等于 448（即模 64 字节等于 56 字节）。</li>
<li>填充后，数据长度必须是 512 位的倍数（即 64 字节的倍数）。</li>
</ul>
<p>以字符串<code>admin</code>为例，十六进制如下</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-plaintext" data-lang="plaintext"><span class="line"><span class="cl">61 64 6D 69 6E
</span></span></code></pre></div><p>首先需要填充到64字节
第一位填充 0x80 剩下的填充 0 直到达到 56 个字节</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-plaintext" data-lang="plaintext"><span class="line"><span class="cl">61 64 6D 69 6E 80 0(填充50次) 共 56 个字节
</span></span></code></pre></div><p>接下来 8 个字节
第一位填充消息长度 * 8，也就是5 * 8 = 40 = 0x28，（0x28 &amp; 0xFF）剩下的填充0</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-plaintext" data-lang="plaintext"><span class="line"><span class="cl">61 64 6D 69 6E 80 0(填充50次) 0x28 0(填充7次) 共 64 个字节
</span></span></code></pre></div><h4 id="211-当输入大小恰好为56字节时">
<a class="header-anchor" href="#211-%e5%bd%93%e8%be%93%e5%85%a5%e5%a4%a7%e5%b0%8f%e6%81%b0%e5%a5%bd%e4%b8%ba56%e5%ad%97%e8%8a%82%e6%97%b6"></a>
2.1.1. 当输入大小恰好为56字节时
</h4><p>理论上，只需添加 0x80 和长度信息即可，但由于 0x80 占用 1 字节，剩余空间不足以容纳 8 字节的长度信息，因此需要填充到下一个 512 位块。</p>
        
        <hr><p>Published on 2025-04-23 at <a href='https://example.org/'>My New Hugo Site</a>, last modified on 2025-04-23</p>]]>
      </description>
      
        <category>Crypto</category>
      
    </item>
    
  </channel>
</rss>
