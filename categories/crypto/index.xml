<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Crypto on My New Hugo Site</title>
    <link>https://asu1tty.github.io/categories/crypto/</link>
    <description>Recent content in Crypto on My New Hugo Site</description>
    <generator>Hugo</generator>
    <language>en</language>
    <lastBuildDate>Fri, 25 Apr 2025 17:21:36 +0800</lastBuildDate>
    <atom:link href="https://asu1tty.github.io/categories/crypto/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>RC4原理及代码实现</title>
      <link>https://asu1tty.github.io/post/rc4/</link>
      <pubDate>Fri, 25 Apr 2025 17:21:36 +0800</pubDate>
      <guid>https://asu1tty.github.io/post/rc4/</guid>
      <description>&lt;p&gt;在&lt;a href=&#34;https://en.wikipedia.org/wiki/Cryptography&#34; title=&#34;Cryptography&#34;&gt;密码学&lt;/a&gt;中，&lt;strong&gt;RC4&lt;/strong&gt;（Rivest Cipher 4，也称为 &lt;strong&gt;ARC4&lt;/strong&gt; 或 &lt;strong&gt;ARCFOUR，&lt;/strong&gt; 意思是Alleged（所谓的） RC4，见下文）是一种&lt;a href=&#34;https://en.wikipedia.org/wiki/Stream_cipher&#34; title=&#34;Stream cipher&#34;&gt;流密码&lt;/a&gt; 。虽然它在软件中以其简单性和速度而著称，但在 RC4 中发现了多个漏洞，使其不安全。&#xA;流密码（streamcipher）是对数据流进行连续处理的一类密码算法。流密码中一般以1比特、8比特或32比特等为单位进行加密和解密。其中RC4的加解密单位为8比特，也就是一个字节。&lt;/p&gt;&#xA;&lt;h2 id=&#34;1-密码学中为什么经常使用异或&#34;&gt;&#xA;&lt;a class=&#34;header-anchor&#34; href=&#34;#1-%e5%af%86%e7%a0%81%e5%ad%a6%e4%b8%ad%e4%b8%ba%e4%bb%80%e4%b9%88%e7%bb%8f%e5%b8%b8%e4%bd%bf%e7%94%a8%e5%bc%82%e6%88%96&#34;&gt;&lt;/a&gt;&#xA;1. 密码学中为什么经常使用异或？&#xA;&lt;/h2&gt;&lt;p&gt;在密码学中经常使用异或运算，&lt;code&gt;RC4&lt;/code&gt;的原理也依赖异或运算。&#xA;下面解释摘自《图解密码技术 第三版》&lt;/p&gt;&#xA;&lt;p&gt;&lt;code&gt;由于两个相同的数进行XOR运算的结果一定为0，因此如果将A⊕B的结果再与B进行XOR运算，则结果会变回A。也就是说，两个公式中的B会相互抵消。&lt;/code&gt;&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;将明文A用密钥B进行加密，得到密文A⊕B&lt;/li&gt;&#xA;&lt;li&gt;将密文A⊕B用密钥B进行解密，得到明文A&#xA;&lt;img src=&#34;https://raw.githubusercontent.com/Asu1tty/blog_img/main/picSource/image-20250425172319106.png&#34; alt=&#34;image-20250425172319106&#34;&gt;&#xA;图片摘自《图解密码技术 第三版》&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;&lt;code&gt;从图中可以看出，执行一次蒙版操作后，原来的图像被隐藏（掩盖）了，而执行两次蒙版操作后，就又可以得到原来的图像了。&lt;/code&gt;&#xA;&lt;code&gt;如果所使用的蒙版是完全随机的比特序列，则使用XOR就可以将原来的图像掩盖起来。但如果蒙版中的比特序列的排列是可以被推测出来的，那么实质上图像就没有被真正掩盖。对于密码技术来说，“是否可以预测”是非常重要的一点。能够产生不可预测的比特序列，对于密码技术的贡献是巨大的。这种不可预测的比特序列就称为随机数。&lt;/code&gt;&lt;/p&gt;&#xA;&lt;h2 id=&#34;2-算法实现过程&#34;&gt;&#xA;&lt;a class=&#34;header-anchor&#34; href=&#34;#2-%e7%ae%97%e6%b3%95%e5%ae%9e%e7%8e%b0%e8%bf%87%e7%a8%8b&#34;&gt;&lt;/a&gt;&#xA;2. 算法实现过程&#xA;&lt;/h2&gt;&lt;h3 id=&#34;21-ksakey-scheduling-algorithm&#34;&gt;&#xA;&lt;a class=&#34;header-anchor&#34; href=&#34;#21-ksakey-scheduling-algorithm&#34;&gt;&lt;/a&gt;&#xA;2.1. KSA(key-scheduling algorithm)&#xA;&lt;/h3&gt;&lt;p&gt;使用密钥调度算法(key-scheduling algorithm)&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;strong&gt;输入&lt;/strong&gt;：一个可变长度的密钥（通常8-2048位）。&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;输出&lt;/strong&gt;：一个256字节的置换数组S（S[0]到S[255]）。&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h4 id=&#34;211-第一步&#34;&gt;&#xA;&lt;a class=&#34;header-anchor&#34; href=&#34;#211-%e7%ac%ac%e4%b8%80%e6%ad%a5&#34;&gt;&lt;/a&gt;&#xA;2.1.1. 第一步&#xA;&lt;/h4&gt;&lt;p&gt;先初始化256字节的数组S，填充0到255的整数，即S[0]=0, S[1]=1, &amp;hellip;, S[255]=255。&lt;/p&gt;&#xA;&lt;h4 id=&#34;212-第二步&#34;&gt;&#xA;&lt;a class=&#34;header-anchor&#34; href=&#34;#212-%e7%ac%ac%e4%ba%8c%e6%ad%a5&#34;&gt;&lt;/a&gt;&#xA;2.1.2. 第二步&#xA;&lt;/h4&gt;&lt;p&gt;创建一个临时数组T，长度与密钥相同，将密钥循环填充到T中（如果密钥长度不足256字节，则重复密钥）。&lt;/p&gt;&#xA;&lt;h4 id=&#34;213-第三步&#34;&gt;&#xA;&lt;a class=&#34;header-anchor&#34; href=&#34;#213-%e7%ac%ac%e4%b8%89%e6%ad%a5&#34;&gt;&lt;/a&gt;&#xA;2.1.3. 第三步&#xA;&lt;/h4&gt;&lt;p&gt;使用以下伪代码进行置换&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;for i = 0 to 255&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    j = (j + S[i] + T[i]) mod 256&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    swap S[i] and S[j]&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;S数组被打乱，形成一个基于密钥的伪随机置换表。这样处理之后，就得到了介绍中提到的&lt;code&gt;不可预测的比特序列&lt;/code&gt;&lt;/p&gt;</description>
    </item>
    <item>
      <title>AES原理及白盒AES的DFA攻击</title>
      <link>https://asu1tty.github.io/post/wb_aes/</link>
      <pubDate>Thu, 24 Apr 2025 21:10:36 +0800</pubDate>
      <guid>https://asu1tty.github.io/post/wb_aes/</guid>
      <description>&lt;p&gt;AES（&lt;strong&gt;Advanced Encryption Standard&lt;/strong&gt;） &lt;strong&gt;高级加密标准&lt;/strong&gt;是 Rijndael &lt;a href=&#34;https://en.wikipedia.org/wiki/Block_cipher&#34; title=&#34;Block cipher&#34;&gt;分组密码&lt;/a&gt;  的一种变体，由两位密码学家 &lt;a href=&#34;https://en.wikipedia.org/wiki/Joan_Daemen&#34; title=&#34;Joan Daemen&#34;&gt;Joan Daemen&lt;/a&gt; 和 &lt;a href=&#34;https://en.wikipedia.org/wiki/Vincent_Rijmen&#34; title=&#34;Vincent Rijmen&#34;&gt;Vincent Rijmen&lt;/a&gt; 开发，他们在 &lt;a href=&#34;https://en.wikipedia.org/wiki/Advanced_Encryption_Standard_process&#34; title=&#34;Advanced Encryption Standard process&#34;&gt;AES 选择过程中&lt;/a&gt;向 NIST 提交了一份提案Rijndael 是一系列具有不同密钥和块大小的密码。对于 AES，NIST 选择了 Rijndael 家族的三个成员，每个成员的块大小为 128 位，但有三种不同的密钥长度：128、192 和 256 位。&lt;/p&gt;&#xA;&lt;h2 id=&#34;1-aes分类&#34;&gt;&#xA;&lt;a class=&#34;header-anchor&#34; href=&#34;#1-aes%e5%88%86%e7%b1%bb&#34;&gt;&lt;/a&gt;&#xA;1. AES分类&#xA;&lt;/h2&gt;&lt;table&gt;&#xA;  &lt;thead&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;th&gt;分类&lt;/th&gt;&#xA;          &lt;th&gt;密钥长度&lt;/th&gt;&#xA;          &lt;th&gt;轮密钥长度&lt;/th&gt;&#xA;          &lt;th&gt;扩展密钥长度&lt;/th&gt;&#xA;          &lt;th&gt;分组长度&lt;/th&gt;&#xA;          &lt;th&gt;加密轮数&lt;/th&gt;&#xA;      &lt;/tr&gt;&#xA;  &lt;/thead&gt;&#xA;  &lt;tbody&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;AES-128&lt;/td&gt;&#xA;          &lt;td&gt;16字节&lt;/td&gt;&#xA;          &lt;td&gt;16字节&lt;/td&gt;&#xA;          &lt;td&gt;16*11=172&lt;/td&gt;&#xA;          &lt;td&gt;16字节&lt;/td&gt;&#xA;          &lt;td&gt;10&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;AES-192&lt;/td&gt;&#xA;          &lt;td&gt;24字节&lt;/td&gt;&#xA;          &lt;td&gt;16字节&lt;/td&gt;&#xA;          &lt;td&gt;16*13=208&lt;/td&gt;&#xA;          &lt;td&gt;16字节&lt;/td&gt;&#xA;          &lt;td&gt;12&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;AES-256&lt;/td&gt;&#xA;          &lt;td&gt;32字节&lt;/td&gt;&#xA;          &lt;td&gt;16字节&lt;/td&gt;&#xA;          &lt;td&gt;16*15=240&lt;/td&gt;&#xA;          &lt;td&gt;16字节&lt;/td&gt;&#xA;          &lt;td&gt;14&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;  &lt;/tbody&gt;&#xA;&lt;/table&gt;&#xA;&lt;p&gt;AES 128 192 256 除了密钥编排算法不一样和加密轮数不一样 其余的计算逻辑相同&lt;/p&gt;&#xA;&lt;p&gt;AES 128 192 256 CBC 模式IV的长度都是16个字节 CBC计算逻辑相同&lt;/p&gt;</description>
    </item>
    <item>
      <title>HMAC原理及代码实现</title>
      <link>https://asu1tty.github.io/post/mhac/</link>
      <pubDate>Thu, 24 Apr 2025 11:45:36 +0800</pubDate>
      <guid>https://asu1tty.github.io/post/mhac/</guid>
      <description>&lt;p&gt;HMAC（Hash-based Message Authentication Code，&lt;a href=&#34;https://so.csdn.net/so/search?q=%E6%95%A3%E5%88%97&amp;amp;spm=1001.2101.3001.7020&#34;&gt;散列&lt;/a&gt;消息认证码）是一种使用密码散列函数，同时结合一个加密密钥，通过特别计算方式之后产生的消息认证码（MAC）。&#xA;HMAC算法利用哈希运算，以一个密钥和一个消息为输入，生成一个消息摘要作为输出。&#xA;hmac算法通常需要以一个hash函数为载体,比如常见的有hmacMd5,hmacSha1,hmacSha256,目前在so里只见到过hmacMd5,hmacSha256,但是hmac的规则是适用所有hash函数的&lt;/p&gt;&#xA;&lt;p&gt;HMAC算法的数学公式为：&#xA;&lt;img src=&#34;https://wikimedia.org/api/rest_v1/media/math/render/svg/fb67423fa152e335f482c2a885c9f2bbed812e81&#34; alt=&#34;{\displaystyle {\textit {HMAC}}(K,m)=H{\Bigl (}(K’\oplus opad)\;||\;H{\bigl (}(K’\oplus ipad)\;||\;m{\bigr )}{\Bigr )}}&#34;&gt;&#xA;其中：&lt;/p&gt;&#xA;&lt;p&gt;&lt;strong&gt;H&lt;/strong&gt; 为密码Hash函数（如MD5或SHA-2)，能够对明文进行分组循环压缩；&lt;/p&gt;&#xA;&lt;p&gt;&lt;strong&gt;K&lt;/strong&gt; 为密钥（secret key）；&lt;/p&gt;&#xA;&lt;p&gt;&lt;strong&gt;m&lt;/strong&gt; 为要认证的消息；&lt;/p&gt;&#xA;&lt;p&gt;&lt;strong&gt;K’&lt;/strong&gt; 是从原始密钥 k 导出的另一个密钥（如果 k 短于散列函数的输入块大小，则向右填充零；如果比该块大小更长，则对 k 进行散列）；&lt;/p&gt;&#xA;&lt;p&gt;&lt;strong&gt;ipad&lt;/strong&gt; 内部填充（0x5C5C5C…5C5C，一段十六进制常量）；&lt;/p&gt;&#xA;&lt;p&gt;&lt;strong&gt;opad&lt;/strong&gt; 外部填充（0x363636…3636，一段十六进制常量)；&lt;/p&gt;&#xA;&lt;p&gt;&lt;strong&gt;⊕&lt;/strong&gt;：按位异或运算。&lt;/p&gt;&#xA;&lt;p&gt;&lt;strong&gt;||&lt;/strong&gt;：字符串拼接。&lt;/p&gt;&#xA;&lt;p&gt;总结8个字就是:&lt;strong&gt;两次加盐,两次hash&lt;/strong&gt;。&lt;/p&gt;&#xA;&lt;h2 id=&#34;1-算法实现过程&#34;&gt;&#xA;&lt;a class=&#34;header-anchor&#34; href=&#34;#1-%e7%ae%97%e6%b3%95%e5%ae%9e%e7%8e%b0%e8%bf%87%e7%a8%8b&#34;&gt;&lt;/a&gt;&#xA;1. 算法实现过程&#xA;&lt;/h2&gt;&lt;p&gt;HMAC需要选择一个哈希函数作为实现的载体，这里以MD5为例&lt;/p&gt;&#xA;&lt;h3 id=&#34;11-第一步扩展密钥&#34;&gt;&#xA;&lt;a class=&#34;header-anchor&#34; href=&#34;#11-%e7%ac%ac%e4%b8%80%e6%ad%a5%e6%89%a9%e5%b1%95%e5%af%86%e9%92%a5&#34;&gt;&lt;/a&gt;&#xA;1.1. 第一步：扩展密钥&#xA;&lt;/h3&gt;&lt;p&gt;以字符串&lt;code&gt;admin&lt;/code&gt;为例，十六进制如下&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-plaintext&#34; data-lang=&#34;plaintext&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;61 64 6D 69 6E&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;填充密钥到64字节&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-plaintext&#34; data-lang=&#34;plaintext&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;61 64 6D 69 6E 00(填充59次)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;12-异或0x36&#34;&gt;&#xA;&lt;a class=&#34;header-anchor&#34; href=&#34;#12-%e5%bc%82%e6%88%960x36&#34;&gt;&lt;/a&gt;&#xA;1.2. 异或0x36&#xA;&lt;/h3&gt;&lt;p&gt;将密钥逐字节异或0x36，得到&lt;strong&gt;扩展密钥1&lt;/strong&gt;，0x36十进制是54&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-plaintext&#34; data-lang=&#34;plaintext&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;57 52 5b 5f 58 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;13-异或0x5c&#34;&gt;&#xA;&lt;a class=&#34;header-anchor&#34; href=&#34;#13-%e5%bc%82%e6%88%960x5c&#34;&gt;&lt;/a&gt;&#xA;1.3. 异或0x5C&#xA;&lt;/h3&gt;&lt;p&gt;将密钥逐字节异或0x5c，得到&lt;strong&gt;扩展密钥2&lt;/strong&gt;，0x54十进制是92&lt;/p&gt;</description>
    </item>
    <item>
      <title>SHA-512简介及代码实现</title>
      <link>https://asu1tty.github.io/post/sha-512/</link>
      <pubDate>Wed, 23 Apr 2025 21:10:36 +0800</pubDate>
      <guid>https://asu1tty.github.io/post/sha-512/</guid>
      <description>&lt;h2 id=&#34;1-算法&#34;&gt;&#xA;&lt;a class=&#34;header-anchor&#34; href=&#34;#1-%e7%ae%97%e6%b3%95&#34;&gt;&lt;/a&gt;&#xA;1. 算法&#xA;&lt;/h2&gt;&lt;p&gt;&lt;code&gt;SHA-512&lt;/code&gt;在app逆向中遇到得很少，所以只作简单介绍&#xA;SHA-1可以生成一个被称为消息摘要的512&lt;a href=&#34;https://zh.wikipedia.org/wiki/%E4%BD%8D&#34; title=&#34;位&#34;&gt;位&lt;/a&gt;（64&lt;a href=&#34;https://zh.wikipedia.org/wiki/%E5%AD%97%E8%8A%82&#34; title=&#34;字节&#34;&gt;字节&lt;/a&gt;）散列值，散列值通常的呈现形式为128个&lt;a href=&#34;https://zh.wikipedia.org/wiki/%E5%8D%81%E5%85%AD%E8%BF%9B%E5%88%B6&#34; title=&#34;十六进制&#34;&gt;十六进制&lt;/a&gt;数。与MD5，SHA1，SHA256不同的是，分组长度为1024位。表示消息长度为128位&lt;/p&gt;&#xA;&lt;h2 id=&#34;2-算法实现过程&#34;&gt;&#xA;&lt;a class=&#34;header-anchor&#34; href=&#34;#2-%e7%ae%97%e6%b3%95%e5%ae%9e%e7%8e%b0%e8%bf%87%e7%a8%8b&#34;&gt;&lt;/a&gt;&#xA;2. 算法实现过程&#xA;&lt;/h2&gt;&lt;h3 id=&#34;21-填充&#34;&gt;&#xA;&lt;a class=&#34;header-anchor&#34; href=&#34;#21-%e5%a1%ab%e5%85%85&#34;&gt;&lt;/a&gt;&#xA;2.1. 填充&#xA;&lt;/h3&gt;&lt;p&gt;以字符串&lt;code&gt;admin&lt;/code&gt;为例，十六进制如下&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-plaintext&#34; data-lang=&#34;plaintext&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;61 64 6D 69 6E&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;首先需要填充到128字节，即先添加一个“1”，再后跟多个“0”，然后再追加一个128位的消息长度信息&#xA;第一位填充 0x80 剩下的填充 0 直到达到 112 个字节&#xA;填充K个“0”，所不同的是消息分组的长度是1024位，所以K的取值必须是满足下述表达式的最小非负整数值。&#xA;&lt;code&gt;( L + 1 + K ) mod 1024 = 896&lt;/code&gt;&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-plaintext&#34; data-lang=&#34;plaintext&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;61 64 6D 69 6E 80 0(填充106次) 共 112 个字节&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;对比md5,sha1,sha256填充都是64字节分组,sha512是128字节分组,原因就在于无论是iv还是k都是8字节的,所以数据块也是8字节的&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-plaintext&#34; data-lang=&#34;plaintext&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;sha512&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;H = [&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    0x6a09e667f3bcc908, 0xbb67ae8584caa73b,&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    0x3c6ef372fe94f82b, 0xa54ff53a5f1d36f1,&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    0x510e527fade682d1, 0x9b05688c2b3e6c1f,&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    0x1f83d9abfb41bd6b, 0x5be0cd19137e2179&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;]&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;sha256&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;H = [&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    0x6a09e667, 0xbb67ae85, 0x3c6ef372, 0xa54ff53a,&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    0x510e527f, 0x9b05688c, 0x1f83d9ab, 0x5be0cd19&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;]&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;sha512的高4字节是sha256的4字节,同理k表也是这样&lt;/p&gt;</description>
    </item>
    <item>
      <title>SHA-256原理及代码实现</title>
      <link>https://asu1tty.github.io/post/sha-256/</link>
      <pubDate>Wed, 23 Apr 2025 17:14:50 +0800</pubDate>
      <guid>https://asu1tty.github.io/post/sha-256/</guid>
      <description>&lt;p&gt;&lt;strong&gt;SHA256&lt;/strong&gt;是SHA-2下细分出的一种算法&#xA;SHA-2，名称来自于安全散列算法2（英语：Secure Hash Algorithm 2）的缩写，一种密码散列函数算法标准，由美国国家安全局研发，属于SHA算法之一，是SHA-1的后继者。&#xA;SHA-2下又可再分为六个不同的算法标准&#xA;包括了：SHA-224、SHA-256、SHA-384、SHA-512、SHA-512/224、SHA-512/256。&#xA;SHA-1可以生成一个被称为消息摘要的256&lt;a href=&#34;https://zh.wikipedia.org/wiki/%E4%BD%8D&#34; title=&#34;位&#34;&gt;位&lt;/a&gt;（32&lt;a href=&#34;https://zh.wikipedia.org/wiki/%E5%AD%97%E8%8A%82&#34; title=&#34;字节&#34;&gt;字节&lt;/a&gt;）散列值，散列值通常的呈现形式为64个&lt;a href=&#34;https://zh.wikipedia.org/wiki/%E5%8D%81%E5%85%AD%E8%BF%9B%E5%88%B6&#34; title=&#34;十六进制&#34;&gt;十六进制&lt;/a&gt;数。&lt;/p&gt;&#xA;&lt;h2 id=&#34;1-算法实现过程&#34;&gt;&#xA;&lt;a class=&#34;header-anchor&#34; href=&#34;#1-%e7%ae%97%e6%b3%95%e5%ae%9e%e7%8e%b0%e8%bf%87%e7%a8%8b&#34;&gt;&lt;/a&gt;&#xA;1. 算法实现过程&#xA;&lt;/h2&gt;&lt;h3 id=&#34;11-第一步填充&#34;&gt;&#xA;&lt;a class=&#34;header-anchor&#34; href=&#34;#11-%e7%ac%ac%e4%b8%80%e6%ad%a5%e5%a1%ab%e5%85%85&#34;&gt;&lt;/a&gt;&#xA;1.1. 第一步：填充&#xA;&lt;/h3&gt;&lt;p&gt;以字符串&lt;code&gt;admin&lt;/code&gt;为例，十六进制如下&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-plaintext&#34; data-lang=&#34;plaintext&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;61 64 6D 69 6E&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;首先需要填充到64字节&#xA;第一位填充 0x80 剩下的填充 0 直到达到 56 个字节&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-plaintext&#34; data-lang=&#34;plaintext&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;61 64 6D 69 6E 80 0(填充50次) 共 56 个字节&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;接下来 8 个字节&#xA;第一位填充消息长度 * 8，也就是5 * 8 = 40 = 0x28&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-plaintext&#34; data-lang=&#34;plaintext&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;61 64 6D 69 6E 80 0(填充50次) 0(填充7次) 0x28 共 64 个字节&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;sha-256和sha-1的填充一样,对比md5,sha-1,sha-256,填充几乎都一样,唯一不同之处就是md5的附加消息长度是小端序,其余两个是大端序。&lt;/p&gt;&#xA;&lt;h3 id=&#34;12-第二步扩充&#34;&gt;&#xA;&lt;a class=&#34;header-anchor&#34; href=&#34;#12-%e7%ac%ac%e4%ba%8c%e6%ad%a5%e6%89%a9%e5%85%85&#34;&gt;&lt;/a&gt;&#xA;1.2. 第二步：扩充&#xA;&lt;/h3&gt;&lt;ul&gt;&#xA;&lt;li&gt;需要将16个四字节扩充至64个四字节&lt;/li&gt;&#xA;&lt;li&gt;前16个四字节复制填充后的16个四字节&lt;/li&gt;&#xA;&lt;li&gt;后48个四字节使用扩充算法进行扩充&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;n&#34;&gt;sha256&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;k&#34;&gt;for&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;i&lt;/span&gt; &lt;span class=&#34;ow&#34;&gt;in&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;range&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;16&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;64&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;):&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;n&#34;&gt;s0&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;right_rotate&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;W&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;15&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;],&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;7&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;^&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;right_rotate&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;W&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;15&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;],&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;18&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;^&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;W&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;15&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;3&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;n&#34;&gt;s1&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;right_rotate&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;W&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;],&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;17&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;^&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;right_rotate&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;W&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;],&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;19&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;^&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;W&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;10&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;n&#34;&gt;W&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;W&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;16&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;+&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;s0&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;+&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;W&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;7&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;+&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;s1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;amp;&lt;/span&gt; &lt;span class=&#34;mh&#34;&gt;0xffffffff&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;n&#34;&gt;sha1&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;k&#34;&gt;for&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;j&lt;/span&gt; &lt;span class=&#34;ow&#34;&gt;in&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;range&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;16&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;80&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;):&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;n&#34;&gt;w&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;j&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;left_rotate&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;w&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;j&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;-&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;3&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;^&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;w&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;j&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;-&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;8&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;^&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;w&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;j&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;-&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;14&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;^&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;w&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;j&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;-&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;16&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;],&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;和sha-1的区别在于sha-1扩展64轮,sha-256扩展48轮,还有就是扩展的方式不一样。&lt;/p&gt;</description>
    </item>
    <item>
      <title>SHA-1原理及代码实现</title>
      <link>https://asu1tty.github.io/post/sha-1/</link>
      <pubDate>Wed, 23 Apr 2025 13:28:36 +0800</pubDate>
      <guid>https://asu1tty.github.io/post/sha-1/</guid>
      <description>&lt;p&gt;&lt;strong&gt;SHA-1&lt;/strong&gt;（英語：Secure Hash Algorithm 1，中文名：安全散列算法1）是一种&lt;a href=&#34;https://zh.wikipedia.org/wiki/%E5%AF%86%E7%A0%81%E6%95%A3%E5%88%97%E5%87%BD%E6%95%B0&#34; title=&#34;密码散列函数&#34;&gt;密码散列函数&lt;/a&gt;，&lt;a href=&#34;https://zh.wikipedia.org/wiki/%E7%BE%8E%E5%9B%BD%E5%9B%BD%E5%AE%B6%E5%AE%89%E5%85%A8%E5%B1%80&#34; title=&#34;美国国家安全局&#34;&gt;美国国家安全局&lt;/a&gt;设计。SHA-1可以生成一个被称为消息摘要的160&lt;a href=&#34;https://zh.wikipedia.org/wiki/%E4%BD%8D&#34; title=&#34;位&#34;&gt;位&lt;/a&gt;（20&lt;a href=&#34;https://zh.wikipedia.org/wiki/%E5%AD%97%E8%8A%82&#34; title=&#34;字节&#34;&gt;字节&lt;/a&gt;）散列值，散列值通常的呈现形式为40个&lt;a href=&#34;https://zh.wikipedia.org/wiki/%E5%8D%81%E5%85%AD%E8%BF%9B%E5%88%B6&#34; title=&#34;十六进制&#34;&gt;十六进制&lt;/a&gt;数。&lt;/p&gt;&#xA;&lt;h2 id=&#34;1-算法实现过程&#34;&gt;&#xA;&lt;a class=&#34;header-anchor&#34; href=&#34;#1-%e7%ae%97%e6%b3%95%e5%ae%9e%e7%8e%b0%e8%bf%87%e7%a8%8b&#34;&gt;&lt;/a&gt;&#xA;1. 算法实现过程&#xA;&lt;/h2&gt;&lt;h3 id=&#34;11-第一步填充&#34;&gt;&#xA;&lt;a class=&#34;header-anchor&#34; href=&#34;#11-%e7%ac%ac%e4%b8%80%e6%ad%a5%e5%a1%ab%e5%85%85&#34;&gt;&lt;/a&gt;&#xA;1.1. 第一步：填充&#xA;&lt;/h3&gt;&lt;p&gt;以字符串&lt;code&gt;admin&lt;/code&gt;为例，十六进制如下&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-plaintext&#34; data-lang=&#34;plaintext&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;61 64 6D 69 6E&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;需要让它填充到64个字节长度&lt;/p&gt;&#xA;&lt;p&gt;第一位填充 0x80 剩下的填充 0 直到达到 56 个字节&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-plaintext&#34; data-lang=&#34;plaintext&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;61 64 6D 69 6E 80 0(填充50次) 共 56 个字节&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;接下来 8 个字节&#xA;消息长度 * 8，也就是5 * 8 = 40 = 0x28&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-plaintext&#34; data-lang=&#34;plaintext&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;61 64 6D 69 6E 80 0(填充50次) 0(填充7次) 0x28 共 64 个字节&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;填充这块唯一和md5有区别的就是,最后的附加消息长度是大端续,也就是正常的顺序&#xA;64字节的分组长度,md5,sha1,sha256都是, sha512是128字节分组。&lt;/p&gt;&#xA;&lt;h3 id=&#34;12-第二步扩充&#34;&gt;&#xA;&lt;a class=&#34;header-anchor&#34; href=&#34;#12-%e7%ac%ac%e4%ba%8c%e6%ad%a5%e6%89%a9%e5%85%85&#34;&gt;&lt;/a&gt;&#xA;1.2. 第二步：扩充&#xA;&lt;/h3&gt;&lt;p&gt;sha1有80轮循环,每一轮要用不同的数据,而填充后的最多只有16个4字节数据,所以需要进行扩展&lt;/p&gt;&#xA;&lt;p&gt;前16个四字节复制填充后的16个四字节&#xA;后64个四字节使用扩充算法进行扩充&#xA;当前位置值 =（ 前面第3个四字节 ^ 前面第8个四字节 ^ 前面第14个四字节 ^ 前面第16个四字节 ）&amp;laquo; 1&lt;/p&gt;</description>
    </item>
    <item>
      <title>MD5原理及代码实现</title>
      <link>https://asu1tty.github.io/post/md5/</link>
      <pubDate>Wed, 23 Apr 2025 11:48:50 +0800</pubDate>
      <guid>https://asu1tty.github.io/post/md5/</guid>
      <description>&lt;p&gt;&lt;strong&gt;MD5消息摘要算法&lt;/strong&gt;（英语：MD5 Message-Digest Algorithm），一种被广泛使用的&lt;a href=&#34;https://zh.wikipedia.org/wiki/%E5%AF%86%E7%A2%BC%E9%9B%9C%E6%B9%8A%E5%87%BD%E6%95%B8&#34; title=&#34;密码散列函数&#34;&gt;密码散列函数&lt;/a&gt;，可以产生出一个128位（16个&lt;a href=&#34;https://zh.wikipedia.org/wiki/%E5%AD%97%E8%8A%82&#34; title=&#34;字节&#34;&gt;字节&lt;/a&gt;）的&lt;a href=&#34;https://zh.wikipedia.org/wiki/%E6%95%A3%E5%88%97&#34; title=&#34;散列&#34;&gt;散列&lt;/a&gt;值（hash value），用于确保资讯传输完整一致。&#xA;将&lt;a href=&#34;https://zh.wikipedia.org/wiki/%E6%95%B0%E6%8D%AE&#34; title=&#34;数据&#34;&gt;数据&lt;/a&gt;（如一段文字）运算变为另一固定长度值，是散列算法的基础原理。&lt;/p&gt;&#xA;&lt;h2 id=&#34;1-算法&#34;&gt;&#xA;&lt;a class=&#34;header-anchor&#34; href=&#34;#1-%e7%ae%97%e6%b3%95&#34;&gt;&lt;/a&gt;&#xA;1. 算法&#xA;&lt;/h2&gt;&lt;p&gt;MD5是输入不定长度，输出固定长度128-bits的算法。经过程序流程，生成四个32位数据，最后联合起来成为一个128-bits（16字节，通常消息传输中更常见表示为32 个十六进制字符）&lt;a href=&#34;https://zh.wikipedia.org/wiki/%E6%95%A3%E5%88%97&#34; title=&#34;散列&#34;&gt;散列&lt;/a&gt;。&lt;/p&gt;&#xA;&lt;h2 id=&#34;2-算法实现过程&#34;&gt;&#xA;&lt;a class=&#34;header-anchor&#34; href=&#34;#2-%e7%ae%97%e6%b3%95%e5%ae%9e%e7%8e%b0%e8%bf%87%e7%a8%8b&#34;&gt;&lt;/a&gt;&#xA;2. 算法实现过程&#xA;&lt;/h2&gt;&lt;h3 id=&#34;21-第一步填充&#34;&gt;&#xA;&lt;a class=&#34;header-anchor&#34; href=&#34;#21-%e7%ac%ac%e4%b8%80%e6%ad%a5%e5%a1%ab%e5%85%85&#34;&gt;&lt;/a&gt;&#xA;2.1. 第一步：填充&#xA;&lt;/h3&gt;&lt;p&gt;MD5 的输入数据需要满足以下条件：&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;数据长度（以位为单位）模 512 等于 448（即模 64 字节等于 56 字节）。&lt;/li&gt;&#xA;&lt;li&gt;填充后，数据长度必须是 512 位的倍数（即 64 字节的倍数）。&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;以字符串&lt;code&gt;admin&lt;/code&gt;为例，十六进制如下&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-plaintext&#34; data-lang=&#34;plaintext&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;61 64 6D 69 6E&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;首先需要填充到64字节&#xA;第一位填充 0x80 剩下的填充 0 直到达到 56 个字节&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-plaintext&#34; data-lang=&#34;plaintext&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;61 64 6D 69 6E 80 0(填充50次) 共 56 个字节&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;接下来 8 个字节&#xA;第一位填充消息长度 * 8，也就是5 * 8 = 40 = 0x28，（0x28 &amp;amp; 0xFF）剩下的填充0&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-plaintext&#34; data-lang=&#34;plaintext&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;61 64 6D 69 6E 80 0(填充50次) 0x28 0(填充7次) 共 64 个字节&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h4 id=&#34;211-当输入大小恰好为56字节时&#34;&gt;&#xA;&lt;a class=&#34;header-anchor&#34; href=&#34;#211-%e5%bd%93%e8%be%93%e5%85%a5%e5%a4%a7%e5%b0%8f%e6%81%b0%e5%a5%bd%e4%b8%ba56%e5%ad%97%e8%8a%82%e6%97%b6&#34;&gt;&lt;/a&gt;&#xA;2.1.1. 当输入大小恰好为56字节时&#xA;&lt;/h4&gt;&lt;p&gt;理论上，只需添加 0x80 和长度信息即可，但由于 0x80 占用 1 字节，剩余空间不足以容纳 8 字节的长度信息，因此需要填充到下一个 512 位块。&lt;/p&gt;</description>
    </item>
  </channel>
</rss>
